
RFID_ReadWrite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a34  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08003c04  08003c04  00004c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e50  08003e50  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e50  08003e50  00004e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e58  08003e58  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e58  08003e58  00004e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e5c  08003e5c  00004e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003e60  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000070  08003ed0  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08003ed0  000052d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084ab  00000000  00000000  0000509a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001767  00000000  00000000  0000d545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0000ecb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058e  00000000  00000000  0000f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217aa  00000000  00000000  0000f986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab3a  00000000  00000000  00031130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9796  00000000  00000000  0003bc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105400  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d4  00000000  00000000  00105444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00107c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003bec 	.word	0x08003bec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003bec 	.word	0x08003bec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles(); //for debugging enable OpenOCD
 80005b4:	f003 fa9c 	bl	8003af0 <initialise_monitor_handles>
	printf("SBC: OpenOCD Debugging test... Ok!\n");
 80005b8:	480a      	ldr	r0, [pc, #40]	@ (80005e4 <main+0x34>)
 80005ba:	f002 fa23 	bl	8002a04 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fd1b 	bl	8000ff8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f813 	bl	80005ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f8a9 	bl	800071c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f87d 	bl	80006c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //PN532_Wakeup();

  PN532_GetFirmwareVersion(); // Get firmware version
 80005ce:	f000 fbed 	bl	8000dac <PN532_GetFirmwareVersion>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Main loop
	  printf("Running...\n");
 80005d2:	4805      	ldr	r0, [pc, #20]	@ (80005e8 <main+0x38>)
 80005d4:	f002 fa16 	bl	8002a04 <puts>
	  HAL_Delay(1000);
 80005d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005dc:	f000 fd7a 	bl	80010d4 <HAL_Delay>
	  printf("Running...\n");
 80005e0:	bf00      	nop
 80005e2:	e7f6      	b.n	80005d2 <main+0x22>
 80005e4:	08003c04 	.word	0x08003c04
 80005e8:	08003c28 	.word	0x08003c28

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2234      	movs	r2, #52	@ 0x34
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fae2 	bl	8002bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b2a      	ldr	r3, [pc, #168]	@ (80006c0 <SystemClock_Config+0xd4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a29      	ldr	r2, [pc, #164]	@ (80006c0 <SystemClock_Config+0xd4>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <SystemClock_Config+0xd4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b24      	ldr	r3, [pc, #144]	@ (80006c4 <SystemClock_Config+0xd8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000638:	4a22      	ldr	r2, [pc, #136]	@ (80006c4 <SystemClock_Config+0xd8>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b20      	ldr	r3, [pc, #128]	@ (80006c4 <SystemClock_Config+0xd8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000660:	2310      	movs	r3, #16
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000668:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066a:	2304      	movs	r3, #4
 800066c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800066e:	2302      	movs	r3, #2
 8000670:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fb2e 	bl	8001cdc <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000686:	f000 f8b7 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 ffc6 	bl	8001638 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006b2:	f000 f8a1 	bl	80007f8 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	@ 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_USART2_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 8000700:	f001 fd8a 	bl	8002218 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f875 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000008c 	.word	0x2000008c
 8000718:	40004400 	.word	0x40004400

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b2d      	ldr	r3, [pc, #180]	@ (80007ec <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a2c      	ldr	r2, [pc, #176]	@ (80007ec <MX_GPIO_Init+0xd0>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b2a      	ldr	r3, [pc, #168]	@ (80007ec <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a25      	ldr	r2, [pc, #148]	@ (80007ec <MX_GPIO_Init+0xd0>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b23      	ldr	r3, [pc, #140]	@ (80007ec <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a1e      	ldr	r2, [pc, #120]	@ (80007ec <MX_GPIO_Init+0xd0>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a17      	ldr	r2, [pc, #92]	@ (80007ec <MX_GPIO_Init+0xd0>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2120      	movs	r1, #32
 80007a6:	4812      	ldr	r0, [pc, #72]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 80007a8:	f000 ff2e 	bl	8001608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <MX_GPIO_Init+0xd8>)
 80007c4:	f000 fd8e 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c8:	2320      	movs	r3, #32
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_GPIO_Init+0xd4>)
 80007e0:	f000 fd80 	bl	80012e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	@ 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40020800 	.word	0x40020800

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("ERROR: Generic ErrorHandler reached.");
 80007fc:	4803      	ldr	r0, [pc, #12]	@ (800080c <Error_Handler+0x14>)
 80007fe:	f002 f899 	bl	8002934 <iprintf>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000802:	b672      	cpsid	i
}
 8000804:	bf00      	nop
  __disable_irq();
  while (1)
 8000806:	bf00      	nop
 8000808:	e7fd      	b.n	8000806 <Error_Handler+0xe>
 800080a:	bf00      	nop
 800080c:	08003c34 	.word	0x08003c34

08000810 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b0c8      	sub	sp, #288	@ 0x120
 8000814:	af00      	add	r7, sp, #0
 8000816:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800081a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800081e:	6018      	str	r0, [r3, #0]
 8000820:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000824:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000828:	6019      	str	r1, [r3, #0]
 800082a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800082e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000832:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8000834:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000838:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	2bff      	cmp	r3, #255	@ 0xff
 8000840:	d806      	bhi.n	8000850 <PN532_WriteFrame+0x40>
 8000842:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000846:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	e0aa      	b.n	80009ac <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 800085c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000860:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8000868:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800086c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000870:	2200      	movs	r2, #0
 8000872:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8000874:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000878:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800087c:	22ff      	movs	r2, #255	@ 0xff
 800087e:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8000880:	2300      	movs	r3, #0
 8000882:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8000886:	e010      	b.n	80008aa <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8000888:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800088c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000890:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000894:	5cd2      	ldrb	r2, [r2, r3]
 8000896:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800089a:	4413      	add	r3, r2
 800089c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 80008a0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80008a4:	3301      	adds	r3, #1
 80008a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80008aa:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d9ea      	bls.n	8000888 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 80008b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008b6:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008c6:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 80008c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008cc:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	425b      	negs	r3, r3
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008e0:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 80008e8:	e023      	b.n	8000932 <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 80008ea:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80008ee:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80008f2:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80008f6:	6812      	ldr	r2, [r2, #0]
 80008f8:	441a      	add	r2, r3
 80008fa:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80008fe:	3305      	adds	r3, #5
 8000900:	7811      	ldrb	r1, [r2, #0]
 8000902:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000906:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800090a:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 800090c:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000910:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000914:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	4413      	add	r3, r2
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000922:	4413      	add	r3, r2
 8000924:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000928:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800092c:	3301      	adds	r3, #1
 800092e:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000932:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000936:	b29b      	uxth	r3, r3
 8000938:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800093c:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000940:	8812      	ldrh	r2, [r2, #0]
 8000942:	429a      	cmp	r2, r3
 8000944:	d8d1      	bhi.n	80008ea <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000946:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800094a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	3305      	adds	r3, #5
 8000952:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8000956:	43d2      	mvns	r2, r2
 8000958:	b2d1      	uxtb	r1, r2
 800095a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800095e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000962:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8000964:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000968:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	3306      	adds	r3, #6
 8000970:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000974:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000978:	2100      	movs	r1, #0
 800097a:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 800097c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000980:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800098c:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000990:	8812      	ldrh	r2, [r2, #0]
 8000992:	3207      	adds	r2, #7
 8000994:	b291      	uxth	r1, r2
 8000996:	f107 0214 	add.w	r2, r7, #20
 800099a:	4610      	mov	r0, r2
 800099c:	4798      	blx	r3
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	e000      	b.n	80009ac <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0c8      	sub	sp, #288	@ 0x120
 80009bc:	af00      	add	r7, sp, #0
 80009be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80009c6:	6018      	str	r0, [r3, #0]
 80009c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80009d0:	6019      	str	r1, [r3, #0]
 80009d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009d6:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80009da:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 80009e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009f2:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80009f6:	8812      	ldrh	r2, [r2, #0]
 80009f8:	3207      	adds	r2, #7
 80009fa:	b291      	uxth	r1, r2
 80009fc:	f107 0214 	add.w	r2, r7, #20
 8000a00:	4610      	mov	r0, r2
 8000a02:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 8000a0a:	e014      	b.n	8000a36 <PN532_ReadFrame+0x7e>
        offset += 1;
 8000a0c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000a10:	3301      	adds	r3, #1
 8000a12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 8000a16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a1a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	1dda      	adds	r2, r3, #7
 8000a22:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000a26:	429a      	cmp	r2, r3
 8000a28:	da05      	bge.n	8000a36 <PN532_ReadFrame+0x7e>
            printf("Response frame preamble does not contain 0x00FF!");
 8000a2a:	4851      	ldr	r0, [pc, #324]	@ (8000b70 <PN532_ReadFrame+0x1b8>)
 8000a2c:	f001 ff82 	bl	8002934 <iprintf>
            return PN532_STATUS_ERROR;
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	e097      	b.n	8000b66 <PN532_ReadFrame+0x1ae>
    while (buff[offset] == 0x00) {
 8000a36:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000a3a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a3e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a42:	5cd3      	ldrb	r3, [r2, r3]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0e1      	beq.n	8000a0c <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8000a48:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000a4c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a50:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a54:	5cd3      	ldrb	r3, [r2, r3]
 8000a56:	2bff      	cmp	r3, #255	@ 0xff
 8000a58:	d005      	beq.n	8000a66 <PN532_ReadFrame+0xae>
        printf("Response frame preamble does not contain 0x00FF!");
 8000a5a:	4845      	ldr	r0, [pc, #276]	@ (8000b70 <PN532_ReadFrame+0x1b8>)
 8000a5c:	f001 ff6a 	bl	8002934 <iprintf>
        return PN532_STATUS_ERROR;
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	e07f      	b.n	8000b66 <PN532_ReadFrame+0x1ae>
    }
    offset += 1;
 8000a66:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 8000a70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a74:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	1dda      	adds	r2, r3, #7
 8000a7c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000a80:	429a      	cmp	r2, r3
 8000a82:	da05      	bge.n	8000a90 <PN532_ReadFrame+0xd8>
        printf("Response contains no data!");
 8000a84:	483b      	ldr	r0, [pc, #236]	@ (8000b74 <PN532_ReadFrame+0x1bc>)
 8000a86:	f001 ff55 	bl	8002934 <iprintf>
        return PN532_STATUS_ERROR;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e06a      	b.n	8000b66 <PN532_ReadFrame+0x1ae>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8000a90:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000a94:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a98:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a9c:	5cd3      	ldrb	r3, [r2, r3]
 8000a9e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000aa2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000aac:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000ab0:	5cd2      	ldrb	r2, [r2, r3]
 8000ab2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d005      	beq.n	8000aca <PN532_ReadFrame+0x112>
        printf("Response length checksum did not match length!");
 8000abe:	482e      	ldr	r0, [pc, #184]	@ (8000b78 <PN532_ReadFrame+0x1c0>)
 8000ac0:	f001 ff38 	bl	8002934 <iprintf>
        return PN532_STATUS_ERROR;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	e04d      	b.n	8000b66 <PN532_ReadFrame+0x1ae>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000ad0:	e014      	b.n	8000afc <PN532_ReadFrame+0x144>
        checksum += buff[offset + 2 + i];
 8000ad2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000ad6:	1c9a      	adds	r2, r3, #2
 8000ad8:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000adc:	4413      	add	r3, r2
 8000ade:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000ae2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000ae6:	5cd2      	ldrb	r2, [r2, r3]
 8000ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000aec:	4413      	add	r3, r2
 8000aee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000af2:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000af6:	3301      	adds	r3, #1
 8000af8:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000afc:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8000b00:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d2e4      	bcs.n	8000ad2 <PN532_ReadFrame+0x11a>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8000b08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d005      	beq.n	8000b1c <PN532_ReadFrame+0x164>
        printf("Response checksum did not match expected checksum");
 8000b10:	481a      	ldr	r0, [pc, #104]	@ (8000b7c <PN532_ReadFrame+0x1c4>)
 8000b12:	f001 ff0f 	bl	8002934 <iprintf>
        return PN532_STATUS_ERROR;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	e024      	b.n	8000b66 <PN532_ReadFrame+0x1ae>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000b22:	e018      	b.n	8000b56 <PN532_ReadFrame+0x19e>
        response[i] = buff[offset + 2 + i];
 8000b24:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000b28:	1c9a      	adds	r2, r3, #2
 8000b2a:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000b2e:	441a      	add	r2, r3
 8000b30:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000b34:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000b38:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8000b3c:	6809      	ldr	r1, [r1, #0]
 8000b3e:	440b      	add	r3, r1
 8000b40:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000b44:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000b48:	5c8a      	ldrb	r2, [r1, r2]
 8000b4a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8000b4c:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000b50:	3301      	adds	r3, #1
 8000b52:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000b56:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8000b5a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d3e0      	bcc.n	8000b24 <PN532_ReadFrame+0x16c>
    }
    return frame_len;
 8000b62:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	08003c5c 	.word	0x08003c5c
 8000b74:	08003c90 	.word	0x08003c90
 8000b78:	08003cac 	.word	0x08003cac
 8000b7c:	08003cdc 	.word	0x08003cdc

08000b80 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b0c7      	sub	sp, #284	@ 0x11c
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8000b8a:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8000b8e:	6020      	str	r0, [r4, #0]
 8000b90:	4608      	mov	r0, r1
 8000b92:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000b96:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000b9a:	600a      	str	r2, [r1, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ba2:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000bb2:	460a      	mov	r2, r1
 8000bb4:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000bb6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000bbe:	22d4      	movs	r2, #212	@ 0xd4
 8000bc0:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000bc2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000bca:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000bce:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 8000bd2:	7812      	ldrb	r2, [r2, #0]
 8000bd4:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000bdc:	e012      	b.n	8000c04 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8000bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000be2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000be6:	441a      	add	r2, r3
 8000be8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000bec:	3302      	adds	r3, #2
 8000bee:	7811      	ldrb	r1, [r2, #0]
 8000bf0:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000bf4:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000bf8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8000bfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000bfe:	3301      	adds	r3, #1
 8000c00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d8e5      	bhi.n	8000bde <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8000c12:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8000c16:	3302      	adds	r3, #2
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	f107 0110 	add.w	r1, r7, #16
 8000c1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c26:	6818      	ldr	r0, [r3, #0]
 8000c28:	f7ff fdf2 	bl	8000810 <PN532_WriteFrame>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00c      	beq.n	8000c4c <PN532_CallFunction+0xcc>
        pn532->wakeup();
 8000c32:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	4798      	blx	r3
        printf("Trying to wakeup");
 8000c40:	4856      	ldr	r0, [pc, #344]	@ (8000d9c <PN532_CallFunction+0x21c>)
 8000c42:	f001 fe77 	bl	8002934 <iprintf>
        return PN532_STATUS_ERROR;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e0a2      	b.n	8000d92 <PN532_CallFunction+0x212>
    }
    if (!pn532->wait_ready(timeout)) {
 8000c4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000c5c:	4798      	blx	r3
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f083 0301 	eor.w	r3, r3, #1
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <PN532_CallFunction+0xf0>
        return PN532_STATUS_ERROR;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e090      	b.n	8000d92 <PN532_CallFunction+0x212>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000c70:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f107 0210 	add.w	r2, r7, #16
 8000c80:	2106      	movs	r1, #6
 8000c82:	4610      	mov	r0, r2
 8000c84:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8000c8c:	e017      	b.n	8000cbe <PN532_CallFunction+0x13e>
        if (PN532_ACK[i] != buff[i]) {
 8000c8e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000c92:	4a43      	ldr	r2, [pc, #268]	@ (8000da0 <PN532_CallFunction+0x220>)
 8000c94:	5cd2      	ldrb	r2, [r2, r3]
 8000c96:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000c9a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000c9e:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000ca2:	5ccb      	ldrb	r3, [r1, r3]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d005      	beq.n	8000cb4 <PN532_CallFunction+0x134>
            printf("Did not receive expected ACK from PN532!");
 8000ca8:	483e      	ldr	r0, [pc, #248]	@ (8000da4 <PN532_CallFunction+0x224>)
 8000caa:	f001 fe43 	bl	8002934 <iprintf>
            return PN532_STATUS_ERROR;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e06e      	b.n	8000d92 <PN532_CallFunction+0x212>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000cb4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8000cbe:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000cc2:	2b05      	cmp	r3, #5
 8000cc4:	d9e3      	bls.n	8000c8e <PN532_CallFunction+0x10e>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000cc6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000cd6:	4798      	blx	r3
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f083 0301 	eor.w	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d002      	beq.n	8000cea <PN532_CallFunction+0x16a>
        return PN532_STATUS_ERROR;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce8:	e053      	b.n	8000d92 <PN532_CallFunction+0x212>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000cea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	f107 0110 	add.w	r1, r7, #16
 8000cfc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	f7ff fe57 	bl	80009b8 <PN532_ReadFrame>
 8000d0a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000d0e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2bd5      	cmp	r3, #213	@ 0xd5
 8000d1a:	d10d      	bne.n	8000d38 <PN532_CallFunction+0x1b8>
 8000d1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d24:	785b      	ldrb	r3, [r3, #1]
 8000d26:	461a      	mov	r2, r3
 8000d28:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d2c:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d005      	beq.n	8000d44 <PN532_CallFunction+0x1c4>
        printf("Received unexpected command response!");
 8000d38:	481b      	ldr	r0, [pc, #108]	@ (8000da8 <PN532_CallFunction+0x228>)
 8000d3a:	f001 fdfb 	bl	8002934 <iprintf>
        return PN532_STATUS_ERROR;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e026      	b.n	8000d92 <PN532_CallFunction+0x212>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000d4a:	e015      	b.n	8000d78 <PN532_CallFunction+0x1f8>
        response[i] = buff[i + 2];
 8000d4c:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000d50:	1c9a      	adds	r2, r3, #2
 8000d52:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000d56:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000d5a:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000d5e:	6809      	ldr	r1, [r1, #0]
 8000d60:	440b      	add	r3, r1
 8000d62:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000d66:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000d6a:	5c8a      	ldrb	r2, [r1, r2]
 8000d6c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000d6e:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000d72:	3301      	adds	r3, #1
 8000d74:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000d78:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000d82:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000d86:	8812      	ldrh	r2, [r2, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8df      	bhi.n	8000d4c <PN532_CallFunction+0x1cc>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000d8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000d90:	3b02      	subs	r3, #2
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd90      	pop	{r4, r7, pc}
 8000d9c:	08003d10 	.word	0x08003d10
 8000da0:	08003de0 	.word	0x08003de0
 8000da4:	08003d24 	.word	0x08003d24
 8000da8:	08003d50 	.word	0x08003d50

08000dac <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af04      	add	r7, sp, #16
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000db6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	2102      	movs	r1, #2
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff fed8 	bl	8000b80 <PN532_CallFunction>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd6:	d105      	bne.n	8000de4 <PN532_GetFirmwareVersion+0x38>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        printf("Failed to detect the PN532");
 8000dd8:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <PN532_GetFirmwareVersion+0x44>)
 8000dda:	f001 fdab 	bl	8002934 <iprintf>
        return PN532_STATUS_ERROR;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e000      	b.n	8000de6 <PN532_GetFirmwareVersion+0x3a>
    }
    return PN532_STATUS_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	08003d78 	.word	0x08003d78

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	4a0f      	ldr	r2, [pc, #60]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e32:	2007      	movs	r0, #7
 8000e34:	f000 fa22 	bl	800127c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	@ (8000ec8 <HAL_UART_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12b      	bne.n	8000ebe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <HAL_UART_MspInit+0x8c>)
 8000eba:	f000 fa13 	bl	80012e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	@ 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40004400 	.word	0x40004400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f8ba 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	@ (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f001 fe80 	bl	8002c60 <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20020000 	.word	0x20020000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	200000d4 	.word	0x200000d4
 8000f94:	200002d8 	.word	0x200002d8

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fa8:	f7ff fff6 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f001 fe4b 	bl	8002c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff faeb 	bl	80005b0 <main>
  bx  lr    
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fe8:	08003e60 	.word	0x08003e60
  ldr r2, =_sbss
 8000fec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ff0:	200002d4 	.word	0x200002d4

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <HAL_Init+0x40>)
 8001002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <HAL_Init+0x40>)
 800100e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <HAL_Init+0x40>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f92b 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f808 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff fee2 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023c00 	.word	0x40023c00

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_InitTick+0x54>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <HAL_InitTick+0x58>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f935 	bl	80012ca <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f000 f90b 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	@ (8001098 <HAL_InitTick+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000000 	.word	0x20000000
 8001094:	20000008 	.word	0x20000008
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <HAL_IncTick+0x1c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_IncTick+0x20>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a03      	ldr	r2, [pc, #12]	@ (80010bc <HAL_IncTick+0x20>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	20000008 	.word	0x20000008
 80010bc:	200000d8 	.word	0x200000d8

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b02      	ldr	r3, [pc, #8]	@ (80010d0 <HAL_GetTick+0x10>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	200000d8 	.word	0x200000d8

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff fff0 	bl	80010c0 <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffe0 	bl	80010c0 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	@ (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	@ (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff90 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff49 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff5e 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff90 	bl	80011d4 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5f 	bl	8001180 <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffb0 	bl	8001238 <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e165      	b.n	80015cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	f040 8154 	bne.w	80015c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b01      	cmp	r3, #1
 8001328:	d005      	beq.n	8001336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001332:	2b02      	cmp	r3, #2
 8001334:	d130      	bne.n	8001398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 0201 	and.w	r2, r3, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d017      	beq.n	80013d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d123      	bne.n	8001428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	69b9      	ldr	r1, [r7, #24]
 8001424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0203 	and.w	r2, r3, #3
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80ae 	beq.w	80015c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b5c      	ldr	r3, [pc, #368]	@ (80015e0 <HAL_GPIO_Init+0x2fc>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	4a5b      	ldr	r2, [pc, #364]	@ (80015e0 <HAL_GPIO_Init+0x2fc>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001478:	6453      	str	r3, [r2, #68]	@ 0x44
 800147a:	4b59      	ldr	r3, [pc, #356]	@ (80015e0 <HAL_GPIO_Init+0x2fc>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001486:	4a57      	ldr	r2, [pc, #348]	@ (80015e4 <HAL_GPIO_Init+0x300>)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4e      	ldr	r2, [pc, #312]	@ (80015e8 <HAL_GPIO_Init+0x304>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d025      	beq.n	80014fe <HAL_GPIO_Init+0x21a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4d      	ldr	r2, [pc, #308]	@ (80015ec <HAL_GPIO_Init+0x308>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d01f      	beq.n	80014fa <HAL_GPIO_Init+0x216>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4c      	ldr	r2, [pc, #304]	@ (80015f0 <HAL_GPIO_Init+0x30c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d019      	beq.n	80014f6 <HAL_GPIO_Init+0x212>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4b      	ldr	r2, [pc, #300]	@ (80015f4 <HAL_GPIO_Init+0x310>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0x20e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4a      	ldr	r2, [pc, #296]	@ (80015f8 <HAL_GPIO_Init+0x314>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00d      	beq.n	80014ee <HAL_GPIO_Init+0x20a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a49      	ldr	r2, [pc, #292]	@ (80015fc <HAL_GPIO_Init+0x318>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_GPIO_Init+0x206>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a48      	ldr	r2, [pc, #288]	@ (8001600 <HAL_GPIO_Init+0x31c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_GPIO_Init+0x202>
 80014e2:	2306      	movs	r3, #6
 80014e4:	e00c      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014e6:	2307      	movs	r3, #7
 80014e8:	e00a      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014ea:	2305      	movs	r3, #5
 80014ec:	e008      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014ee:	2304      	movs	r3, #4
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014f2:	2303      	movs	r3, #3
 80014f4:	e004      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014fe:	2300      	movs	r3, #0
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	f002 0203 	and.w	r2, r2, #3
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	4093      	lsls	r3, r2
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001510:	4934      	ldr	r1, [pc, #208]	@ (80015e4 <HAL_GPIO_Init+0x300>)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151e:	4b39      	ldr	r3, [pc, #228]	@ (8001604 <HAL_GPIO_Init+0x320>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001542:	4a30      	ldr	r2, [pc, #192]	@ (8001604 <HAL_GPIO_Init+0x320>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001548:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <HAL_GPIO_Init+0x320>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800156c:	4a25      	ldr	r2, [pc, #148]	@ (8001604 <HAL_GPIO_Init+0x320>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <HAL_GPIO_Init+0x320>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001596:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <HAL_GPIO_Init+0x320>)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_GPIO_Init+0x320>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c0:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <HAL_GPIO_Init+0x320>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b0f      	cmp	r3, #15
 80015d0:	f67f ae96 	bls.w	8001300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3724      	adds	r7, #36	@ 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40013800 	.word	0x40013800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40021400 	.word	0x40021400
 8001600:	40021800 	.word	0x40021800
 8001604:	40013c00 	.word	0x40013c00

08001608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
 8001614:	4613      	mov	r3, r2
 8001616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001624:	e003      	b.n	800162e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	041a      	lsls	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	619a      	str	r2, [r3, #24]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0cc      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b68      	ldr	r3, [pc, #416]	@ (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d90c      	bls.n	8001674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b65      	ldr	r3, [pc, #404]	@ (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b63      	ldr	r3, [pc, #396]	@ (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0b8      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d020      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800168c:	4b59      	ldr	r3, [pc, #356]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a58      	ldr	r2, [pc, #352]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a4:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4a52      	ldr	r2, [pc, #328]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b50      	ldr	r3, [pc, #320]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	494d      	ldr	r1, [pc, #308]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d044      	beq.n	8001758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b47      	ldr	r3, [pc, #284]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d119      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e07f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d003      	beq.n	80016f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b3f      	ldr	r3, [pc, #252]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4b3b      	ldr	r3, [pc, #236]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e067      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001716:	4b37      	ldr	r3, [pc, #220]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f023 0203 	bic.w	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4934      	ldr	r1, [pc, #208]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	4313      	orrs	r3, r2
 8001726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001728:	f7ff fcca 	bl	80010c0 <HAL_GetTick>
 800172c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	e00a      	b.n	8001746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7ff fcc6 	bl	80010c0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e04f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b2b      	ldr	r3, [pc, #172]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 020c 	and.w	r2, r3, #12
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d1eb      	bne.n	8001730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b25      	ldr	r3, [pc, #148]	@ (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d20c      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e032      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4916      	ldr	r1, [pc, #88]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017aa:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	490e      	ldr	r1, [pc, #56]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017be:	f000 f853 	bl	8001868 <HAL_RCC_GetSysClockFreq>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	490a      	ldr	r1, [pc, #40]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	5ccb      	ldrb	r3, [r1, r3]
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fc2c 	bl	800103c <HAL_InitTick>

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023c00 	.word	0x40023c00
 80017f4:	40023800 	.word	0x40023800
 80017f8:	08003de8 	.word	0x08003de8
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000004 	.word	0x20000004

08001804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001808:	4b02      	ldr	r3, [pc, #8]	@ (8001814 <HAL_RCC_GetHCLKFreq+0x10>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	20000000 	.word	0x20000000

08001818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800181c:	f7ff fff2 	bl	8001804 <HAL_RCC_GetHCLKFreq>
 8001820:	4602      	mov	r2, r0
 8001822:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	0a9b      	lsrs	r3, r3, #10
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	4903      	ldr	r1, [pc, #12]	@ (800183c <HAL_RCC_GetPCLK1Freq+0x24>)
 800182e:	5ccb      	ldrb	r3, [r1, r3]
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	08003df8 	.word	0x08003df8

08001840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001844:	f7ff ffde 	bl	8001804 <HAL_RCC_GetHCLKFreq>
 8001848:	4602      	mov	r2, r0
 800184a:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	0b5b      	lsrs	r3, r3, #13
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	4903      	ldr	r1, [pc, #12]	@ (8001864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001856:	5ccb      	ldrb	r3, [r1, r3]
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	08003df8 	.word	0x08003df8

08001868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800186c:	b0ae      	sub	sp, #184	@ 0xb8
 800186e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800188e:	4bcf      	ldr	r3, [pc, #828]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x364>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b0c      	cmp	r3, #12
 8001898:	f200 8211 	bhi.w	8001cbe <HAL_RCC_GetSysClockFreq+0x456>
 800189c:	a201      	add	r2, pc, #4	@ (adr r2, 80018a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a2:	bf00      	nop
 80018a4:	080018d9 	.word	0x080018d9
 80018a8:	08001cbf 	.word	0x08001cbf
 80018ac:	08001cbf 	.word	0x08001cbf
 80018b0:	08001cbf 	.word	0x08001cbf
 80018b4:	080018e1 	.word	0x080018e1
 80018b8:	08001cbf 	.word	0x08001cbf
 80018bc:	08001cbf 	.word	0x08001cbf
 80018c0:	08001cbf 	.word	0x08001cbf
 80018c4:	080018e9 	.word	0x080018e9
 80018c8:	08001cbf 	.word	0x08001cbf
 80018cc:	08001cbf 	.word	0x08001cbf
 80018d0:	08001cbf 	.word	0x08001cbf
 80018d4:	08001ae5 	.word	0x08001ae5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4bbd      	ldr	r3, [pc, #756]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x368>)
 80018da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80018de:	e1f2      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x45e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018e0:	4bbc      	ldr	r3, [pc, #752]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x36c>)
 80018e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018e6:	e1ee      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x45e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e8:	4bb8      	ldr	r3, [pc, #736]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x364>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f4:	4bb5      	ldr	r3, [pc, #724]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x364>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d075      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x184>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001900:	4bb2      	ldr	r3, [pc, #712]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x364>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	099b      	lsrs	r3, r3, #6
 8001906:	2200      	movs	r2, #0
 8001908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800190c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001910:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001918:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001922:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001926:	4622      	mov	r2, r4
 8001928:	462b      	mov	r3, r5
 800192a:	f04f 0000 	mov.w	r0, #0
 800192e:	f04f 0100 	mov.w	r1, #0
 8001932:	0159      	lsls	r1, r3, #5
 8001934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001938:	0150      	lsls	r0, r2, #5
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4621      	mov	r1, r4
 8001940:	1a51      	subs	r1, r2, r1
 8001942:	6439      	str	r1, [r7, #64]	@ 0x40
 8001944:	4629      	mov	r1, r5
 8001946:	eb63 0301 	sbc.w	r3, r3, r1
 800194a:	647b      	str	r3, [r7, #68]	@ 0x44
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001958:	4649      	mov	r1, r9
 800195a:	018b      	lsls	r3, r1, #6
 800195c:	4641      	mov	r1, r8
 800195e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001962:	4641      	mov	r1, r8
 8001964:	018a      	lsls	r2, r1, #6
 8001966:	46c4      	mov	ip, r8
 8001968:	ebb2 0c0c 	subs.w	ip, r2, ip
 800196c:	f8c7 c038 	str.w	ip, [r7, #56]	@ 0x38
 8001970:	4649      	mov	r1, r9
 8001972:	eb63 0301 	sbc.w	r3, r3, r1
 8001976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001984:	4649      	mov	r1, r9
 8001986:	00cb      	lsls	r3, r1, #3
 8001988:	46c4      	mov	ip, r8
 800198a:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 800198e:	4641      	mov	r1, r8
 8001990:	00ca      	lsls	r2, r1, #3
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	4603      	mov	r3, r0
 8001998:	4622      	mov	r2, r4
 800199a:	189b      	adds	r3, r3, r2
 800199c:	633b      	str	r3, [r7, #48]	@ 0x30
 800199e:	462b      	mov	r3, r5
 80019a0:	460a      	mov	r2, r1
 80019a2:	eb42 0303 	adc.w	r3, r2, r3
 80019a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019b4:	4629      	mov	r1, r5
 80019b6:	024b      	lsls	r3, r1, #9
 80019b8:	4620      	mov	r0, r4
 80019ba:	4629      	mov	r1, r5
 80019bc:	4604      	mov	r4, r0
 80019be:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80019c2:	4601      	mov	r1, r0
 80019c4:	024a      	lsls	r2, r1, #9
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019ce:	2200      	movs	r2, #0
 80019d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80019d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80019d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80019dc:	f7fe fc70 	bl	80002c0 <__aeabi_uldivmod>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4613      	mov	r3, r2
 80019e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80019ea:	e069      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x258>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ec:	4b77      	ldr	r3, [pc, #476]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x364>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	099b      	lsrs	r3, r3, #6
 80019f2:	2200      	movs	r2, #0
 80019f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80019f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80019fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001a06:	2300      	movs	r3, #0
 8001a08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001a0e:	4622      	mov	r2, r4
 8001a10:	462b      	mov	r3, r5
 8001a12:	f04f 0000 	mov.w	r0, #0
 8001a16:	f04f 0100 	mov.w	r1, #0
 8001a1a:	0159      	lsls	r1, r3, #5
 8001a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a20:	0150      	lsls	r0, r2, #5
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4621      	mov	r1, r4
 8001a28:	1a51      	subs	r1, r2, r1
 8001a2a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001a40:	4649      	mov	r1, r9
 8001a42:	018b      	lsls	r3, r1, #6
 8001a44:	4641      	mov	r1, r8
 8001a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a4a:	4641      	mov	r1, r8
 8001a4c:	018a      	lsls	r2, r1, #6
 8001a4e:	46c4      	mov	ip, r8
 8001a50:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001a54:	4649      	mov	r1, r9
 8001a56:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a6e:	4692      	mov	sl, r2
 8001a70:	469b      	mov	fp, r3
 8001a72:	4623      	mov	r3, r4
 8001a74:	eb1a 0303 	adds.w	r3, sl, r3
 8001a78:	623b      	str	r3, [r7, #32]
 8001a7a:	462b      	mov	r3, r5
 8001a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001a8e:	4629      	mov	r1, r5
 8001a90:	028b      	lsls	r3, r1, #10
 8001a92:	4620      	mov	r0, r4
 8001a94:	4629      	mov	r1, r5
 8001a96:	4604      	mov	r4, r0
 8001a98:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	028a      	lsls	r2, r1, #10
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	673b      	str	r3, [r7, #112]	@ 0x70
 8001aac:	677a      	str	r2, [r7, #116]	@ 0x74
 8001aae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ab2:	f7fe fc05 	bl	80002c0 <__aeabi_uldivmod>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4613      	mov	r3, r2
 8001abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac0:	4b42      	ldr	r3, [pc, #264]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x364>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	3301      	adds	r3, #1
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001ad2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ae2:	e0f0      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x45e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ae4:	4b39      	ldr	r3, [pc, #228]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x364>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001aec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af0:	4b36      	ldr	r3, [pc, #216]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x364>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d06d      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x370>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afc:	4b33      	ldr	r3, [pc, #204]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x364>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	2200      	movs	r2, #0
 8001b04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b10:	2300      	movs	r3, #0
 8001b12:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b18:	4622      	mov	r2, r4
 8001b1a:	462b      	mov	r3, r5
 8001b1c:	f04f 0000 	mov.w	r0, #0
 8001b20:	f04f 0100 	mov.w	r1, #0
 8001b24:	0159      	lsls	r1, r3, #5
 8001b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b2a:	0150      	lsls	r0, r2, #5
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4621      	mov	r1, r4
 8001b32:	1a51      	subs	r1, r2, r1
 8001b34:	61b9      	str	r1, [r7, #24]
 8001b36:	4629      	mov	r1, r5
 8001b38:	eb63 0301 	sbc.w	r3, r3, r1
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b4a:	4659      	mov	r1, fp
 8001b4c:	018b      	lsls	r3, r1, #6
 8001b4e:	4651      	mov	r1, sl
 8001b50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b54:	4651      	mov	r1, sl
 8001b56:	018a      	lsls	r2, r1, #6
 8001b58:	46d4      	mov	ip, sl
 8001b5a:	ebb2 080c 	subs.w	r8, r2, ip
 8001b5e:	4659      	mov	r1, fp
 8001b60:	eb63 0901 	sbc.w	r9, r3, r1
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b78:	4690      	mov	r8, r2
 8001b7a:	4699      	mov	r9, r3
 8001b7c:	4623      	mov	r3, r4
 8001b7e:	eb18 0303 	adds.w	r3, r8, r3
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	462b      	mov	r3, r5
 8001b86:	eb49 0303 	adc.w	r3, r9, r3
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001b98:	4629      	mov	r1, r5
 8001b9a:	024b      	lsls	r3, r1, #9
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	024a      	lsls	r2, r1, #9
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001bb6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001bb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bbc:	f7fe fb80 	bl	80002c0 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bca:	e068      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x436>
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	00f42400 	.word	0x00f42400
 8001bd4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x46c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	099b      	lsrs	r3, r3, #6
 8001bde:	2200      	movs	r2, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	4611      	mov	r1, r2
 8001be4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001be8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bea:	2300      	movs	r3, #0
 8001bec:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001bf2:	4642      	mov	r2, r8
 8001bf4:	464b      	mov	r3, r9
 8001bf6:	f04f 0000 	mov.w	r0, #0
 8001bfa:	f04f 0100 	mov.w	r1, #0
 8001bfe:	0159      	lsls	r1, r3, #5
 8001c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c04:	0150      	lsls	r0, r2, #5
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4641      	mov	r1, r8
 8001c0c:	1a51      	subs	r1, r2, r1
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	4649      	mov	r1, r9
 8001c12:	eb63 0301 	sbc.w	r3, r3, r1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c24:	4659      	mov	r1, fp
 8001c26:	018b      	lsls	r3, r1, #6
 8001c28:	4651      	mov	r1, sl
 8001c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c2e:	4651      	mov	r1, sl
 8001c30:	018a      	lsls	r2, r1, #6
 8001c32:	46d4      	mov	ip, sl
 8001c34:	ebb2 040c 	subs.w	r4, r2, ip
 8001c38:	4659      	mov	r1, fp
 8001c3a:	eb63 0501 	sbc.w	r5, r3, r1
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	00eb      	lsls	r3, r5, #3
 8001c48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c4c:	00e2      	lsls	r2, r4, #3
 8001c4e:	4614      	mov	r4, r2
 8001c50:	461d      	mov	r5, r3
 8001c52:	4643      	mov	r3, r8
 8001c54:	18e3      	adds	r3, r4, r3
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	464b      	mov	r3, r9
 8001c5a:	eb45 0303 	adc.w	r3, r5, r3
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	028b      	lsls	r3, r1, #10
 8001c70:	4620      	mov	r0, r4
 8001c72:	4629      	mov	r1, r5
 8001c74:	4604      	mov	r4, r0
 8001c76:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001c7a:	4601      	mov	r1, r0
 8001c7c:	028a      	lsls	r2, r1, #10
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c86:	2200      	movs	r2, #0
 8001c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c8a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c90:	f7fe fb16 	bl	80002c0 <__aeabi_uldivmod>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x46c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	0f1b      	lsrs	r3, r3, #28
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001cac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001cb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cbc:	e003      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x45e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x470>)
 8001cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	37b8      	adds	r7, #184	@ 0xb8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	00f42400 	.word	0x00f42400

08001cdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e28d      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8083 	beq.w	8001e02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cfc:	4b94      	ldr	r3, [pc, #592]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d019      	beq.n	8001d3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d08:	4b91      	ldr	r3, [pc, #580]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d14:	4b8e      	ldr	r3, [pc, #568]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d20:	d00c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d22:	4b8b      	ldr	r3, [pc, #556]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d112      	bne.n	8001d54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2e:	4b88      	ldr	r3, [pc, #544]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d3a:	d10b      	bne.n	8001d54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	4b84      	ldr	r3, [pc, #528]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d05b      	beq.n	8001e00 <HAL_RCC_OscConfig+0x124>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d157      	bne.n	8001e00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e25a      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_OscConfig+0x90>
 8001d5e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7b      	ldr	r2, [pc, #492]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e01d      	b.n	8001da8 <HAL_RCC_OscConfig+0xcc>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0xb4>
 8001d76:	4b76      	ldr	r3, [pc, #472]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a75      	ldr	r2, [pc, #468]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b73      	ldr	r3, [pc, #460]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a72      	ldr	r2, [pc, #456]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0xcc>
 8001d90:	4b6f      	ldr	r3, [pc, #444]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a6e      	ldr	r2, [pc, #440]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6b      	ldr	r2, [pc, #428]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff f986 	bl	80010c0 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff f982 	bl	80010c0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	@ 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e21f      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b61      	ldr	r3, [pc, #388]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0xdc>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f972 	bl	80010c0 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff f96e 	bl	80010c0 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	@ 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e20b      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	4b57      	ldr	r3, [pc, #348]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x104>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d06f      	beq.n	8001eee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e0e:	4b50      	ldr	r3, [pc, #320]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d017      	beq.n	8001e4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d105      	bne.n	8001e32 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e26:	4b4a      	ldr	r3, [pc, #296]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e32:	4b47      	ldr	r3, [pc, #284]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d11c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3e:	4b44      	ldr	r3, [pc, #272]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d116      	bne.n	8001e78 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	4b41      	ldr	r3, [pc, #260]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x186>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e1d3      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b3b      	ldr	r3, [pc, #236]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4937      	ldr	r1, [pc, #220]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	e03a      	b.n	8001eee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e80:	4b34      	ldr	r3, [pc, #208]	@ (8001f54 <HAL_RCC_OscConfig+0x278>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff f91b 	bl	80010c0 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f917 	bl	80010c0 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e1b4      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4925      	ldr	r1, [pc, #148]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	e015      	b.n	8001eee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec2:	4b24      	ldr	r3, [pc, #144]	@ (8001f54 <HAL_RCC_OscConfig+0x278>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f8fa 	bl	80010c0 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff f8f6 	bl	80010c0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e193      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d036      	beq.n	8001f68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d016      	beq.n	8001f30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff f8da 	bl	80010c0 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f10:	f7ff f8d6 	bl	80010c0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e173      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x234>
 8001f2e:	e01b      	b.n	8001f68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_RCC_OscConfig+0x27c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7ff f8c3 	bl	80010c0 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	e00e      	b.n	8001f5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7ff f8bf 	bl	80010c0 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d907      	bls.n	8001f5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e15c      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
 8001f50:	40023800 	.word	0x40023800
 8001f54:	42470000 	.word	0x42470000
 8001f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5c:	4b8a      	ldr	r3, [pc, #552]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8001f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ea      	bne.n	8001f3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8097 	beq.w	80020a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7a:	4b83      	ldr	r3, [pc, #524]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10f      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f96:	4b7c      	ldr	r3, [pc, #496]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b79      	ldr	r3, [pc, #484]	@ (800218c <HAL_RCC_OscConfig+0x4b0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb2:	4b76      	ldr	r3, [pc, #472]	@ (800218c <HAL_RCC_OscConfig+0x4b0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a75      	ldr	r2, [pc, #468]	@ (800218c <HAL_RCC_OscConfig+0x4b0>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f87f 	bl	80010c0 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7ff f87b 	bl	80010c0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e118      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	4b6c      	ldr	r3, [pc, #432]	@ (800218c <HAL_RCC_OscConfig+0x4b0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x31e>
 8001fec:	4b66      	ldr	r3, [pc, #408]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff0:	4a65      	ldr	r2, [pc, #404]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff8:	e01c      	b.n	8002034 <HAL_RCC_OscConfig+0x358>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b05      	cmp	r3, #5
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x340>
 8002002:	4b61      	ldr	r3, [pc, #388]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002006:	4a60      	ldr	r2, [pc, #384]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	6713      	str	r3, [r2, #112]	@ 0x70
 800200e:	4b5e      	ldr	r3, [pc, #376]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002012:	4a5d      	ldr	r2, [pc, #372]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6713      	str	r3, [r2, #112]	@ 0x70
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0x358>
 800201c:	4b5a      	ldr	r3, [pc, #360]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002020:	4a59      	ldr	r2, [pc, #356]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	6713      	str	r3, [r2, #112]	@ 0x70
 8002028:	4b57      	ldr	r3, [pc, #348]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800202c:	4a56      	ldr	r2, [pc, #344]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 800202e:	f023 0304 	bic.w	r3, r3, #4
 8002032:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d015      	beq.n	8002068 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203c:	f7ff f840 	bl	80010c0 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002042:	e00a      	b.n	800205a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f7ff f83c 	bl	80010c0 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e0d7      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205a:	4b4b      	ldr	r3, [pc, #300]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0ee      	beq.n	8002044 <HAL_RCC_OscConfig+0x368>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff f82a 	bl	80010c0 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7ff f826 	bl	80010c0 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e0c1      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002086:	4b40      	ldr	r3, [pc, #256]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ee      	bne.n	8002070 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002092:	7dfb      	ldrb	r3, [r7, #23]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b3b      	ldr	r3, [pc, #236]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	4a3a      	ldr	r2, [pc, #232]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80ad 	beq.w	8002208 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ae:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d060      	beq.n	800217c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d145      	bne.n	800214e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c2:	4b33      	ldr	r3, [pc, #204]	@ (8002190 <HAL_RCC_OscConfig+0x4b4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe fffa 	bl	80010c0 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d0:	f7fe fff6 	bl	80010c0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e093      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e2:	4b29      	ldr	r3, [pc, #164]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	041b      	lsls	r3, r3, #16
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	071b      	lsls	r3, r3, #28
 800211a:	491b      	ldr	r1, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_RCC_OscConfig+0x4b4>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe ffcb 	bl	80010c0 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212e:	f7fe ffc7 	bl	80010c0 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e064      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x452>
 800214c:	e05c      	b.n	8002208 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_RCC_OscConfig+0x4b4>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7fe ffb4 	bl	80010c0 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe ffb0 	bl	80010c0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e04d      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_RCC_OscConfig+0x4ac>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x480>
 800217a:	e045      	b.n	8002208 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d107      	bne.n	8002194 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e040      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
 8002188:	40023800 	.word	0x40023800
 800218c:	40007000 	.word	0x40007000
 8002190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002194:	4b1f      	ldr	r3, [pc, #124]	@ (8002214 <HAL_RCC_OscConfig+0x538>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d030      	beq.n	8002204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d129      	bne.n	8002204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d122      	bne.n	8002204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021c4:	4013      	ands	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d119      	bne.n	8002204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	3b01      	subs	r3, #1
 80021de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10f      	bne.n	8002204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800

08002218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e042      	b.n	80022b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d106      	bne.n	8002244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe fe00 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2224      	movs	r2, #36	@ 0x24
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800225a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f82b 	bl	80022b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022bc:	b0c0      	sub	sp, #256	@ 0x100
 80022be:	af00      	add	r7, sp, #0
 80022c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80022d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d4:	68d9      	ldr	r1, [r3, #12]
 80022d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	ea40 0301 	orr.w	r3, r0, r1
 80022e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002310:	f021 010c 	bic.w	r1, r1, #12
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800231e:	430b      	orrs	r3, r1
 8002320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800232e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002332:	6999      	ldr	r1, [r3, #24]
 8002334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	ea40 0301 	orr.w	r3, r0, r1
 800233e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	4b91      	ldr	r3, [pc, #580]	@ (800258c <UART_SetConfig+0x2d4>)
 8002348:	429a      	cmp	r2, r3
 800234a:	d005      	beq.n	8002358 <UART_SetConfig+0xa0>
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b8f      	ldr	r3, [pc, #572]	@ (8002590 <UART_SetConfig+0x2d8>)
 8002354:	429a      	cmp	r2, r3
 8002356:	d104      	bne.n	8002362 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002358:	f7ff fa72 	bl	8001840 <HAL_RCC_GetPCLK2Freq>
 800235c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002360:	e003      	b.n	800236a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002362:	f7ff fa59 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 8002366:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800236a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002374:	f040 8110 	bne.w	8002598 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800237c:	2200      	movs	r2, #0
 800237e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002382:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002386:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800238a:	4622      	mov	r2, r4
 800238c:	462b      	mov	r3, r5
 800238e:	1891      	adds	r1, r2, r2
 8002390:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002392:	415b      	adcs	r3, r3
 8002394:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002396:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800239a:	4620      	mov	r0, r4
 800239c:	4629      	mov	r1, r5
 800239e:	4604      	mov	r4, r0
 80023a0:	eb12 0804 	adds.w	r8, r2, r4
 80023a4:	460c      	mov	r4, r1
 80023a6:	eb43 0904 	adc.w	r9, r3, r4
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023be:	4690      	mov	r8, r2
 80023c0:	4699      	mov	r9, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	eb18 0303 	adds.w	r3, r8, r3
 80023c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80023cc:	460b      	mov	r3, r1
 80023ce:	eb49 0303 	adc.w	r3, r9, r3
 80023d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80023e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80023e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80023ea:	460b      	mov	r3, r1
 80023ec:	18db      	adds	r3, r3, r3
 80023ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80023f0:	4613      	mov	r3, r2
 80023f2:	eb42 0303 	adc.w	r3, r2, r3
 80023f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80023f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80023fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002400:	f7fd ff5e 	bl	80002c0 <__aeabi_uldivmod>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4b62      	ldr	r3, [pc, #392]	@ (8002594 <UART_SetConfig+0x2dc>)
 800240a:	fba3 2302 	umull	r2, r3, r3, r2
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	011c      	lsls	r4, r3, #4
 8002412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002416:	2200      	movs	r2, #0
 8002418:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800241c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002420:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002424:	4642      	mov	r2, r8
 8002426:	464b      	mov	r3, r9
 8002428:	1891      	adds	r1, r2, r2
 800242a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800242c:	415b      	adcs	r3, r3
 800242e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002430:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002434:	4645      	mov	r5, r8
 8002436:	eb12 0a05 	adds.w	sl, r2, r5
 800243a:	4640      	mov	r0, r8
 800243c:	4649      	mov	r1, r9
 800243e:	460d      	mov	r5, r1
 8002440:	eb43 0b05 	adc.w	fp, r3, r5
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002450:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002458:	4692      	mov	sl, r2
 800245a:	469b      	mov	fp, r3
 800245c:	4603      	mov	r3, r0
 800245e:	eb1a 0303 	adds.w	r3, sl, r3
 8002462:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002466:	460b      	mov	r3, r1
 8002468:	eb4b 0303 	adc.w	r3, fp, r3
 800246c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800247c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002484:	460b      	mov	r3, r1
 8002486:	18db      	adds	r3, r3, r3
 8002488:	643b      	str	r3, [r7, #64]	@ 0x40
 800248a:	4613      	mov	r3, r2
 800248c:	eb42 0303 	adc.w	r3, r2, r3
 8002490:	647b      	str	r3, [r7, #68]	@ 0x44
 8002492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800249a:	f7fd ff11 	bl	80002c0 <__aeabi_uldivmod>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4611      	mov	r1, r2
 80024a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002594 <UART_SetConfig+0x2dc>)
 80024a6:	fba3 2301 	umull	r2, r3, r3, r1
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2264      	movs	r2, #100	@ 0x64
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	1acb      	subs	r3, r1, r3
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80024ba:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <UART_SetConfig+0x2dc>)
 80024bc:	fba3 2302 	umull	r2, r3, r3, r2
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024c8:	441c      	add	r4, r3
 80024ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024ce:	2200      	movs	r2, #0
 80024d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80024d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80024dc:	4642      	mov	r2, r8
 80024de:	464b      	mov	r3, r9
 80024e0:	1891      	adds	r1, r2, r2
 80024e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024e4:	415b      	adcs	r3, r3
 80024e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024ec:	4641      	mov	r1, r8
 80024ee:	1851      	adds	r1, r2, r1
 80024f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80024f2:	4649      	mov	r1, r9
 80024f4:	414b      	adcs	r3, r1
 80024f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002504:	4659      	mov	r1, fp
 8002506:	00cb      	lsls	r3, r1, #3
 8002508:	4655      	mov	r5, sl
 800250a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800250e:	4651      	mov	r1, sl
 8002510:	00ca      	lsls	r2, r1, #3
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	4603      	mov	r3, r0
 8002518:	4642      	mov	r2, r8
 800251a:	189b      	adds	r3, r3, r2
 800251c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002520:	464b      	mov	r3, r9
 8002522:	460a      	mov	r2, r1
 8002524:	eb42 0303 	adc.w	r3, r2, r3
 8002528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002538:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800253c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002540:	460b      	mov	r3, r1
 8002542:	18db      	adds	r3, r3, r3
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002546:	4613      	mov	r3, r2
 8002548:	eb42 0303 	adc.w	r3, r2, r3
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800254e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002552:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002556:	f7fd feb3 	bl	80002c0 <__aeabi_uldivmod>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <UART_SetConfig+0x2dc>)
 8002560:	fba3 1302 	umull	r1, r3, r3, r2
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	2164      	movs	r1, #100	@ 0x64
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	3332      	adds	r3, #50	@ 0x32
 8002572:	4a08      	ldr	r2, [pc, #32]	@ (8002594 <UART_SetConfig+0x2dc>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	f003 0207 	and.w	r2, r3, #7
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4422      	add	r2, r4
 8002586:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002588:	e10a      	b.n	80027a0 <UART_SetConfig+0x4e8>
 800258a:	bf00      	nop
 800258c:	40011000 	.word	0x40011000
 8002590:	40011400 	.word	0x40011400
 8002594:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800259c:	2200      	movs	r2, #0
 800259e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025aa:	4642      	mov	r2, r8
 80025ac:	464b      	mov	r3, r9
 80025ae:	1891      	adds	r1, r2, r2
 80025b0:	6239      	str	r1, [r7, #32]
 80025b2:	415b      	adcs	r3, r3
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025ba:	4641      	mov	r1, r8
 80025bc:	1854      	adds	r4, r2, r1
 80025be:	46cc      	mov	ip, r9
 80025c0:	eb43 050c 	adc.w	r5, r3, ip
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	00eb      	lsls	r3, r5, #3
 80025ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d2:	00e2      	lsls	r2, r4, #3
 80025d4:	4614      	mov	r4, r2
 80025d6:	461d      	mov	r5, r3
 80025d8:	4640      	mov	r0, r8
 80025da:	4649      	mov	r1, r9
 80025dc:	4603      	mov	r3, r0
 80025de:	18e3      	adds	r3, r4, r3
 80025e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025e4:	460b      	mov	r3, r1
 80025e6:	eb45 0303 	adc.w	r3, r5, r3
 80025ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800260a:	4629      	mov	r1, r5
 800260c:	008b      	lsls	r3, r1, #2
 800260e:	4620      	mov	r0, r4
 8002610:	4629      	mov	r1, r5
 8002612:	4604      	mov	r4, r0
 8002614:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002618:	4601      	mov	r1, r0
 800261a:	008a      	lsls	r2, r1, #2
 800261c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002620:	f7fd fe4e 	bl	80002c0 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4b60      	ldr	r3, [pc, #384]	@ (80027ac <UART_SetConfig+0x4f4>)
 800262a:	fba3 2302 	umull	r2, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	011c      	lsls	r4, r3, #4
 8002632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002636:	2200      	movs	r2, #0
 8002638:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800263c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002640:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002644:	4642      	mov	r2, r8
 8002646:	464b      	mov	r3, r9
 8002648:	1891      	adds	r1, r2, r2
 800264a:	61b9      	str	r1, [r7, #24]
 800264c:	415b      	adcs	r3, r3
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002654:	4641      	mov	r1, r8
 8002656:	1851      	adds	r1, r2, r1
 8002658:	6139      	str	r1, [r7, #16]
 800265a:	4649      	mov	r1, r9
 800265c:	414b      	adcs	r3, r1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800266c:	4659      	mov	r1, fp
 800266e:	00cb      	lsls	r3, r1, #3
 8002670:	4655      	mov	r5, sl
 8002672:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002676:	4651      	mov	r1, sl
 8002678:	00ca      	lsls	r2, r1, #3
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	4603      	mov	r3, r0
 8002680:	4642      	mov	r2, r8
 8002682:	189b      	adds	r3, r3, r2
 8002684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002688:	464b      	mov	r3, r9
 800268a:	460a      	mov	r2, r1
 800268c:	eb42 0303 	adc.w	r3, r2, r3
 8002690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800269e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026ac:	4649      	mov	r1, r9
 80026ae:	008b      	lsls	r3, r1, #2
 80026b0:	4645      	mov	r5, r8
 80026b2:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80026b6:	4641      	mov	r1, r8
 80026b8:	008a      	lsls	r2, r1, #2
 80026ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80026be:	f7fd fdff 	bl	80002c0 <__aeabi_uldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <UART_SetConfig+0x4f4>)
 80026ca:	fba3 2301 	umull	r2, r3, r3, r1
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2264      	movs	r2, #100	@ 0x64
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	1acb      	subs	r3, r1, r3
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	3332      	adds	r3, #50	@ 0x32
 80026dc:	4a33      	ldr	r2, [pc, #204]	@ (80027ac <UART_SetConfig+0x4f4>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026e8:	441c      	add	r4, r3
 80026ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ee:	2200      	movs	r2, #0
 80026f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80026f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80026f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80026f8:	4642      	mov	r2, r8
 80026fa:	464b      	mov	r3, r9
 80026fc:	1891      	adds	r1, r2, r2
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	415b      	adcs	r3, r3
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002708:	4641      	mov	r1, r8
 800270a:	1851      	adds	r1, r2, r1
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	4649      	mov	r1, r9
 8002710:	414b      	adcs	r3, r1
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002720:	4659      	mov	r1, fp
 8002722:	00cb      	lsls	r3, r1, #3
 8002724:	4655      	mov	r5, sl
 8002726:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800272a:	4651      	mov	r1, sl
 800272c:	00ca      	lsls	r2, r1, #3
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	4603      	mov	r3, r0
 8002734:	4642      	mov	r2, r8
 8002736:	189b      	adds	r3, r3, r2
 8002738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800273a:	464b      	mov	r3, r9
 800273c:	460a      	mov	r2, r1
 800273e:	eb42 0303 	adc.w	r3, r2, r3
 8002742:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	663b      	str	r3, [r7, #96]	@ 0x60
 800274e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800275c:	4649      	mov	r1, r9
 800275e:	008b      	lsls	r3, r1, #2
 8002760:	4645      	mov	r5, r8
 8002762:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8002766:	4641      	mov	r1, r8
 8002768:	008a      	lsls	r2, r1, #2
 800276a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800276e:	f7fd fda7 	bl	80002c0 <__aeabi_uldivmod>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <UART_SetConfig+0x4f4>)
 8002778:	fba3 1302 	umull	r1, r3, r3, r2
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	2164      	movs	r1, #100	@ 0x64
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	3332      	adds	r3, #50	@ 0x32
 800278a:	4a08      	ldr	r2, [pc, #32]	@ (80027ac <UART_SetConfig+0x4f4>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	f003 020f 	and.w	r2, r3, #15
 8002796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4422      	add	r2, r4
 800279e:	609a      	str	r2, [r3, #8]
}
 80027a0:	bf00      	nop
 80027a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027a6:	46bd      	mov	sp, r7
 80027a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ac:	51eb851f 	.word	0x51eb851f

080027b0 <std>:
 80027b0:	2300      	movs	r3, #0
 80027b2:	b510      	push	{r4, lr}
 80027b4:	4604      	mov	r4, r0
 80027b6:	e9c0 3300 	strd	r3, r3, [r0]
 80027ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027be:	6083      	str	r3, [r0, #8]
 80027c0:	8181      	strh	r1, [r0, #12]
 80027c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80027c4:	81c2      	strh	r2, [r0, #14]
 80027c6:	6183      	str	r3, [r0, #24]
 80027c8:	4619      	mov	r1, r3
 80027ca:	2208      	movs	r2, #8
 80027cc:	305c      	adds	r0, #92	@ 0x5c
 80027ce:	f000 f9f9 	bl	8002bc4 <memset>
 80027d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002808 <std+0x58>)
 80027d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80027d6:	4b0d      	ldr	r3, [pc, #52]	@ (800280c <std+0x5c>)
 80027d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80027da:	4b0d      	ldr	r3, [pc, #52]	@ (8002810 <std+0x60>)
 80027dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <std+0x64>)
 80027e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <std+0x68>)
 80027e4:	6224      	str	r4, [r4, #32]
 80027e6:	429c      	cmp	r4, r3
 80027e8:	d006      	beq.n	80027f8 <std+0x48>
 80027ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80027ee:	4294      	cmp	r4, r2
 80027f0:	d002      	beq.n	80027f8 <std+0x48>
 80027f2:	33d0      	adds	r3, #208	@ 0xd0
 80027f4:	429c      	cmp	r4, r3
 80027f6:	d105      	bne.n	8002804 <std+0x54>
 80027f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80027fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002800:	f000 ba58 	b.w	8002cb4 <__retarget_lock_init_recursive>
 8002804:	bd10      	pop	{r4, pc}
 8002806:	bf00      	nop
 8002808:	08002a15 	.word	0x08002a15
 800280c:	08002a37 	.word	0x08002a37
 8002810:	08002a6f 	.word	0x08002a6f
 8002814:	08002a93 	.word	0x08002a93
 8002818:	200000dc 	.word	0x200000dc

0800281c <stdio_exit_handler>:
 800281c:	4a02      	ldr	r2, [pc, #8]	@ (8002828 <stdio_exit_handler+0xc>)
 800281e:	4903      	ldr	r1, [pc, #12]	@ (800282c <stdio_exit_handler+0x10>)
 8002820:	4803      	ldr	r0, [pc, #12]	@ (8002830 <stdio_exit_handler+0x14>)
 8002822:	f000 b869 	b.w	80028f8 <_fwalk_sglue>
 8002826:	bf00      	nop
 8002828:	2000000c 	.word	0x2000000c
 800282c:	08003549 	.word	0x08003549
 8002830:	2000001c 	.word	0x2000001c

08002834 <cleanup_stdio>:
 8002834:	6841      	ldr	r1, [r0, #4]
 8002836:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <cleanup_stdio+0x34>)
 8002838:	4299      	cmp	r1, r3
 800283a:	b510      	push	{r4, lr}
 800283c:	4604      	mov	r4, r0
 800283e:	d001      	beq.n	8002844 <cleanup_stdio+0x10>
 8002840:	f000 fe82 	bl	8003548 <_fflush_r>
 8002844:	68a1      	ldr	r1, [r4, #8]
 8002846:	4b09      	ldr	r3, [pc, #36]	@ (800286c <cleanup_stdio+0x38>)
 8002848:	4299      	cmp	r1, r3
 800284a:	d002      	beq.n	8002852 <cleanup_stdio+0x1e>
 800284c:	4620      	mov	r0, r4
 800284e:	f000 fe7b 	bl	8003548 <_fflush_r>
 8002852:	68e1      	ldr	r1, [r4, #12]
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <cleanup_stdio+0x3c>)
 8002856:	4299      	cmp	r1, r3
 8002858:	d004      	beq.n	8002864 <cleanup_stdio+0x30>
 800285a:	4620      	mov	r0, r4
 800285c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002860:	f000 be72 	b.w	8003548 <_fflush_r>
 8002864:	bd10      	pop	{r4, pc}
 8002866:	bf00      	nop
 8002868:	200000dc 	.word	0x200000dc
 800286c:	20000144 	.word	0x20000144
 8002870:	200001ac 	.word	0x200001ac

08002874 <global_stdio_init.part.0>:
 8002874:	b510      	push	{r4, lr}
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <global_stdio_init.part.0+0x30>)
 8002878:	4c0b      	ldr	r4, [pc, #44]	@ (80028a8 <global_stdio_init.part.0+0x34>)
 800287a:	4a0c      	ldr	r2, [pc, #48]	@ (80028ac <global_stdio_init.part.0+0x38>)
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	4620      	mov	r0, r4
 8002880:	2200      	movs	r2, #0
 8002882:	2104      	movs	r1, #4
 8002884:	f7ff ff94 	bl	80027b0 <std>
 8002888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800288c:	2201      	movs	r2, #1
 800288e:	2109      	movs	r1, #9
 8002890:	f7ff ff8e 	bl	80027b0 <std>
 8002894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002898:	2202      	movs	r2, #2
 800289a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800289e:	2112      	movs	r1, #18
 80028a0:	f7ff bf86 	b.w	80027b0 <std>
 80028a4:	20000214 	.word	0x20000214
 80028a8:	200000dc 	.word	0x200000dc
 80028ac:	0800281d 	.word	0x0800281d

080028b0 <__sfp_lock_acquire>:
 80028b0:	4801      	ldr	r0, [pc, #4]	@ (80028b8 <__sfp_lock_acquire+0x8>)
 80028b2:	f000 ba00 	b.w	8002cb6 <__retarget_lock_acquire_recursive>
 80028b6:	bf00      	nop
 80028b8:	2000021d 	.word	0x2000021d

080028bc <__sfp_lock_release>:
 80028bc:	4801      	ldr	r0, [pc, #4]	@ (80028c4 <__sfp_lock_release+0x8>)
 80028be:	f000 b9fb 	b.w	8002cb8 <__retarget_lock_release_recursive>
 80028c2:	bf00      	nop
 80028c4:	2000021d 	.word	0x2000021d

080028c8 <__sinit>:
 80028c8:	b510      	push	{r4, lr}
 80028ca:	4604      	mov	r4, r0
 80028cc:	f7ff fff0 	bl	80028b0 <__sfp_lock_acquire>
 80028d0:	6a23      	ldr	r3, [r4, #32]
 80028d2:	b11b      	cbz	r3, 80028dc <__sinit+0x14>
 80028d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028d8:	f7ff bff0 	b.w	80028bc <__sfp_lock_release>
 80028dc:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <__sinit+0x28>)
 80028de:	6223      	str	r3, [r4, #32]
 80028e0:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <__sinit+0x2c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f5      	bne.n	80028d4 <__sinit+0xc>
 80028e8:	f7ff ffc4 	bl	8002874 <global_stdio_init.part.0>
 80028ec:	e7f2      	b.n	80028d4 <__sinit+0xc>
 80028ee:	bf00      	nop
 80028f0:	08002835 	.word	0x08002835
 80028f4:	20000214 	.word	0x20000214

080028f8 <_fwalk_sglue>:
 80028f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028fc:	4607      	mov	r7, r0
 80028fe:	4688      	mov	r8, r1
 8002900:	4614      	mov	r4, r2
 8002902:	2600      	movs	r6, #0
 8002904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002908:	f1b9 0901 	subs.w	r9, r9, #1
 800290c:	d505      	bpl.n	800291a <_fwalk_sglue+0x22>
 800290e:	6824      	ldr	r4, [r4, #0]
 8002910:	2c00      	cmp	r4, #0
 8002912:	d1f7      	bne.n	8002904 <_fwalk_sglue+0xc>
 8002914:	4630      	mov	r0, r6
 8002916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800291a:	89ab      	ldrh	r3, [r5, #12]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d907      	bls.n	8002930 <_fwalk_sglue+0x38>
 8002920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002924:	3301      	adds	r3, #1
 8002926:	d003      	beq.n	8002930 <_fwalk_sglue+0x38>
 8002928:	4629      	mov	r1, r5
 800292a:	4638      	mov	r0, r7
 800292c:	47c0      	blx	r8
 800292e:	4306      	orrs	r6, r0
 8002930:	3568      	adds	r5, #104	@ 0x68
 8002932:	e7e9      	b.n	8002908 <_fwalk_sglue+0x10>

08002934 <iprintf>:
 8002934:	b40f      	push	{r0, r1, r2, r3}
 8002936:	b507      	push	{r0, r1, r2, lr}
 8002938:	4906      	ldr	r1, [pc, #24]	@ (8002954 <iprintf+0x20>)
 800293a:	ab04      	add	r3, sp, #16
 800293c:	6808      	ldr	r0, [r1, #0]
 800293e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002942:	6881      	ldr	r1, [r0, #8]
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	f000 fad9 	bl	8002efc <_vfiprintf_r>
 800294a:	b003      	add	sp, #12
 800294c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002950:	b004      	add	sp, #16
 8002952:	4770      	bx	lr
 8002954:	20000018 	.word	0x20000018

08002958 <_puts_r>:
 8002958:	6a03      	ldr	r3, [r0, #32]
 800295a:	b570      	push	{r4, r5, r6, lr}
 800295c:	6884      	ldr	r4, [r0, #8]
 800295e:	4605      	mov	r5, r0
 8002960:	460e      	mov	r6, r1
 8002962:	b90b      	cbnz	r3, 8002968 <_puts_r+0x10>
 8002964:	f7ff ffb0 	bl	80028c8 <__sinit>
 8002968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800296a:	07db      	lsls	r3, r3, #31
 800296c:	d405      	bmi.n	800297a <_puts_r+0x22>
 800296e:	89a3      	ldrh	r3, [r4, #12]
 8002970:	0598      	lsls	r0, r3, #22
 8002972:	d402      	bmi.n	800297a <_puts_r+0x22>
 8002974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002976:	f000 f99e 	bl	8002cb6 <__retarget_lock_acquire_recursive>
 800297a:	89a3      	ldrh	r3, [r4, #12]
 800297c:	0719      	lsls	r1, r3, #28
 800297e:	d502      	bpl.n	8002986 <_puts_r+0x2e>
 8002980:	6923      	ldr	r3, [r4, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d135      	bne.n	80029f2 <_puts_r+0x9a>
 8002986:	4621      	mov	r1, r4
 8002988:	4628      	mov	r0, r5
 800298a:	f000 f8c5 	bl	8002b18 <__swsetup_r>
 800298e:	b380      	cbz	r0, 80029f2 <_puts_r+0x9a>
 8002990:	f04f 35ff 	mov.w	r5, #4294967295
 8002994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002996:	07da      	lsls	r2, r3, #31
 8002998:	d405      	bmi.n	80029a6 <_puts_r+0x4e>
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	059b      	lsls	r3, r3, #22
 800299e:	d402      	bmi.n	80029a6 <_puts_r+0x4e>
 80029a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80029a2:	f000 f989 	bl	8002cb8 <__retarget_lock_release_recursive>
 80029a6:	4628      	mov	r0, r5
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da04      	bge.n	80029b8 <_puts_r+0x60>
 80029ae:	69a2      	ldr	r2, [r4, #24]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	dc17      	bgt.n	80029e4 <_puts_r+0x8c>
 80029b4:	290a      	cmp	r1, #10
 80029b6:	d015      	beq.n	80029e4 <_puts_r+0x8c>
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	6022      	str	r2, [r4, #0]
 80029be:	7019      	strb	r1, [r3, #0]
 80029c0:	68a3      	ldr	r3, [r4, #8]
 80029c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80029c6:	3b01      	subs	r3, #1
 80029c8:	60a3      	str	r3, [r4, #8]
 80029ca:	2900      	cmp	r1, #0
 80029cc:	d1ed      	bne.n	80029aa <_puts_r+0x52>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	da11      	bge.n	80029f6 <_puts_r+0x9e>
 80029d2:	4622      	mov	r2, r4
 80029d4:	210a      	movs	r1, #10
 80029d6:	4628      	mov	r0, r5
 80029d8:	f000 f85f 	bl	8002a9a <__swbuf_r>
 80029dc:	3001      	adds	r0, #1
 80029de:	d0d7      	beq.n	8002990 <_puts_r+0x38>
 80029e0:	250a      	movs	r5, #10
 80029e2:	e7d7      	b.n	8002994 <_puts_r+0x3c>
 80029e4:	4622      	mov	r2, r4
 80029e6:	4628      	mov	r0, r5
 80029e8:	f000 f857 	bl	8002a9a <__swbuf_r>
 80029ec:	3001      	adds	r0, #1
 80029ee:	d1e7      	bne.n	80029c0 <_puts_r+0x68>
 80029f0:	e7ce      	b.n	8002990 <_puts_r+0x38>
 80029f2:	3e01      	subs	r6, #1
 80029f4:	e7e4      	b.n	80029c0 <_puts_r+0x68>
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	6022      	str	r2, [r4, #0]
 80029fc:	220a      	movs	r2, #10
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	e7ee      	b.n	80029e0 <_puts_r+0x88>
	...

08002a04 <puts>:
 8002a04:	4b02      	ldr	r3, [pc, #8]	@ (8002a10 <puts+0xc>)
 8002a06:	4601      	mov	r1, r0
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	f7ff bfa5 	b.w	8002958 <_puts_r>
 8002a0e:	bf00      	nop
 8002a10:	20000018 	.word	0x20000018

08002a14 <__sread>:
 8002a14:	b510      	push	{r4, lr}
 8002a16:	460c      	mov	r4, r1
 8002a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a1c:	f000 f8fc 	bl	8002c18 <_read_r>
 8002a20:	2800      	cmp	r0, #0
 8002a22:	bfab      	itete	ge
 8002a24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002a26:	89a3      	ldrhlt	r3, [r4, #12]
 8002a28:	181b      	addge	r3, r3, r0
 8002a2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002a2e:	bfac      	ite	ge
 8002a30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002a32:	81a3      	strhlt	r3, [r4, #12]
 8002a34:	bd10      	pop	{r4, pc}

08002a36 <__swrite>:
 8002a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a3a:	461f      	mov	r7, r3
 8002a3c:	898b      	ldrh	r3, [r1, #12]
 8002a3e:	05db      	lsls	r3, r3, #23
 8002a40:	4605      	mov	r5, r0
 8002a42:	460c      	mov	r4, r1
 8002a44:	4616      	mov	r6, r2
 8002a46:	d505      	bpl.n	8002a54 <__swrite+0x1e>
 8002a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f000 f8d0 	bl	8002bf4 <_lseek_r>
 8002a54:	89a3      	ldrh	r3, [r4, #12]
 8002a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a5e:	81a3      	strh	r3, [r4, #12]
 8002a60:	4632      	mov	r2, r6
 8002a62:	463b      	mov	r3, r7
 8002a64:	4628      	mov	r0, r5
 8002a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a6a:	f000 b8e7 	b.w	8002c3c <_write_r>

08002a6e <__sseek>:
 8002a6e:	b510      	push	{r4, lr}
 8002a70:	460c      	mov	r4, r1
 8002a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a76:	f000 f8bd 	bl	8002bf4 <_lseek_r>
 8002a7a:	1c43      	adds	r3, r0, #1
 8002a7c:	89a3      	ldrh	r3, [r4, #12]
 8002a7e:	bf15      	itete	ne
 8002a80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002a82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002a86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002a8a:	81a3      	strheq	r3, [r4, #12]
 8002a8c:	bf18      	it	ne
 8002a8e:	81a3      	strhne	r3, [r4, #12]
 8002a90:	bd10      	pop	{r4, pc}

08002a92 <__sclose>:
 8002a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a96:	f000 b89d 	b.w	8002bd4 <_close_r>

08002a9a <__swbuf_r>:
 8002a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9c:	460e      	mov	r6, r1
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	4605      	mov	r5, r0
 8002aa2:	b118      	cbz	r0, 8002aac <__swbuf_r+0x12>
 8002aa4:	6a03      	ldr	r3, [r0, #32]
 8002aa6:	b90b      	cbnz	r3, 8002aac <__swbuf_r+0x12>
 8002aa8:	f7ff ff0e 	bl	80028c8 <__sinit>
 8002aac:	69a3      	ldr	r3, [r4, #24]
 8002aae:	60a3      	str	r3, [r4, #8]
 8002ab0:	89a3      	ldrh	r3, [r4, #12]
 8002ab2:	071a      	lsls	r2, r3, #28
 8002ab4:	d501      	bpl.n	8002aba <__swbuf_r+0x20>
 8002ab6:	6923      	ldr	r3, [r4, #16]
 8002ab8:	b943      	cbnz	r3, 8002acc <__swbuf_r+0x32>
 8002aba:	4621      	mov	r1, r4
 8002abc:	4628      	mov	r0, r5
 8002abe:	f000 f82b 	bl	8002b18 <__swsetup_r>
 8002ac2:	b118      	cbz	r0, 8002acc <__swbuf_r+0x32>
 8002ac4:	f04f 37ff 	mov.w	r7, #4294967295
 8002ac8:	4638      	mov	r0, r7
 8002aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	6922      	ldr	r2, [r4, #16]
 8002ad0:	1a98      	subs	r0, r3, r2
 8002ad2:	6963      	ldr	r3, [r4, #20]
 8002ad4:	b2f6      	uxtb	r6, r6
 8002ad6:	4283      	cmp	r3, r0
 8002ad8:	4637      	mov	r7, r6
 8002ada:	dc05      	bgt.n	8002ae8 <__swbuf_r+0x4e>
 8002adc:	4621      	mov	r1, r4
 8002ade:	4628      	mov	r0, r5
 8002ae0:	f000 fd32 	bl	8003548 <_fflush_r>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d1ed      	bne.n	8002ac4 <__swbuf_r+0x2a>
 8002ae8:	68a3      	ldr	r3, [r4, #8]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	60a3      	str	r3, [r4, #8]
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	6022      	str	r2, [r4, #0]
 8002af4:	701e      	strb	r6, [r3, #0]
 8002af6:	6962      	ldr	r2, [r4, #20]
 8002af8:	1c43      	adds	r3, r0, #1
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d004      	beq.n	8002b08 <__swbuf_r+0x6e>
 8002afe:	89a3      	ldrh	r3, [r4, #12]
 8002b00:	07db      	lsls	r3, r3, #31
 8002b02:	d5e1      	bpl.n	8002ac8 <__swbuf_r+0x2e>
 8002b04:	2e0a      	cmp	r6, #10
 8002b06:	d1df      	bne.n	8002ac8 <__swbuf_r+0x2e>
 8002b08:	4621      	mov	r1, r4
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	f000 fd1c 	bl	8003548 <_fflush_r>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d0d9      	beq.n	8002ac8 <__swbuf_r+0x2e>
 8002b14:	e7d6      	b.n	8002ac4 <__swbuf_r+0x2a>
	...

08002b18 <__swsetup_r>:
 8002b18:	b538      	push	{r3, r4, r5, lr}
 8002b1a:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <__swsetup_r+0xa8>)
 8002b1c:	4605      	mov	r5, r0
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	460c      	mov	r4, r1
 8002b22:	b118      	cbz	r0, 8002b2c <__swsetup_r+0x14>
 8002b24:	6a03      	ldr	r3, [r0, #32]
 8002b26:	b90b      	cbnz	r3, 8002b2c <__swsetup_r+0x14>
 8002b28:	f7ff fece 	bl	80028c8 <__sinit>
 8002b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b30:	0719      	lsls	r1, r3, #28
 8002b32:	d422      	bmi.n	8002b7a <__swsetup_r+0x62>
 8002b34:	06da      	lsls	r2, r3, #27
 8002b36:	d407      	bmi.n	8002b48 <__swsetup_r+0x30>
 8002b38:	2209      	movs	r2, #9
 8002b3a:	602a      	str	r2, [r5, #0]
 8002b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b40:	81a3      	strh	r3, [r4, #12]
 8002b42:	f04f 30ff 	mov.w	r0, #4294967295
 8002b46:	e033      	b.n	8002bb0 <__swsetup_r+0x98>
 8002b48:	0758      	lsls	r0, r3, #29
 8002b4a:	d512      	bpl.n	8002b72 <__swsetup_r+0x5a>
 8002b4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b4e:	b141      	cbz	r1, 8002b62 <__swsetup_r+0x4a>
 8002b50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b54:	4299      	cmp	r1, r3
 8002b56:	d002      	beq.n	8002b5e <__swsetup_r+0x46>
 8002b58:	4628      	mov	r0, r5
 8002b5a:	f000 f8af 	bl	8002cbc <_free_r>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b62:	89a3      	ldrh	r3, [r4, #12]
 8002b64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002b68:	81a3      	strh	r3, [r4, #12]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6063      	str	r3, [r4, #4]
 8002b6e:	6923      	ldr	r3, [r4, #16]
 8002b70:	6023      	str	r3, [r4, #0]
 8002b72:	89a3      	ldrh	r3, [r4, #12]
 8002b74:	f043 0308 	orr.w	r3, r3, #8
 8002b78:	81a3      	strh	r3, [r4, #12]
 8002b7a:	6923      	ldr	r3, [r4, #16]
 8002b7c:	b94b      	cbnz	r3, 8002b92 <__swsetup_r+0x7a>
 8002b7e:	89a3      	ldrh	r3, [r4, #12]
 8002b80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b88:	d003      	beq.n	8002b92 <__swsetup_r+0x7a>
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	f000 fd29 	bl	80035e4 <__smakebuf_r>
 8002b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b96:	f013 0201 	ands.w	r2, r3, #1
 8002b9a:	d00a      	beq.n	8002bb2 <__swsetup_r+0x9a>
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	60a2      	str	r2, [r4, #8]
 8002ba0:	6962      	ldr	r2, [r4, #20]
 8002ba2:	4252      	negs	r2, r2
 8002ba4:	61a2      	str	r2, [r4, #24]
 8002ba6:	6922      	ldr	r2, [r4, #16]
 8002ba8:	b942      	cbnz	r2, 8002bbc <__swsetup_r+0xa4>
 8002baa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002bae:	d1c5      	bne.n	8002b3c <__swsetup_r+0x24>
 8002bb0:	bd38      	pop	{r3, r4, r5, pc}
 8002bb2:	0799      	lsls	r1, r3, #30
 8002bb4:	bf58      	it	pl
 8002bb6:	6962      	ldrpl	r2, [r4, #20]
 8002bb8:	60a2      	str	r2, [r4, #8]
 8002bba:	e7f4      	b.n	8002ba6 <__swsetup_r+0x8e>
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	e7f7      	b.n	8002bb0 <__swsetup_r+0x98>
 8002bc0:	20000018 	.word	0x20000018

08002bc4 <memset>:
 8002bc4:	4402      	add	r2, r0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d100      	bne.n	8002bce <memset+0xa>
 8002bcc:	4770      	bx	lr
 8002bce:	f803 1b01 	strb.w	r1, [r3], #1
 8002bd2:	e7f9      	b.n	8002bc8 <memset+0x4>

08002bd4 <_close_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	4d06      	ldr	r5, [pc, #24]	@ (8002bf0 <_close_r+0x1c>)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	4604      	mov	r4, r0
 8002bdc:	4608      	mov	r0, r1
 8002bde:	602b      	str	r3, [r5, #0]
 8002be0:	f000 fe40 	bl	8003864 <_close>
 8002be4:	1c43      	adds	r3, r0, #1
 8002be6:	d102      	bne.n	8002bee <_close_r+0x1a>
 8002be8:	682b      	ldr	r3, [r5, #0]
 8002bea:	b103      	cbz	r3, 8002bee <_close_r+0x1a>
 8002bec:	6023      	str	r3, [r4, #0]
 8002bee:	bd38      	pop	{r3, r4, r5, pc}
 8002bf0:	20000218 	.word	0x20000218

08002bf4 <_lseek_r>:
 8002bf4:	b538      	push	{r3, r4, r5, lr}
 8002bf6:	4d07      	ldr	r5, [pc, #28]	@ (8002c14 <_lseek_r+0x20>)
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	4608      	mov	r0, r1
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	2200      	movs	r2, #0
 8002c00:	602a      	str	r2, [r5, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	f000 fdef 	bl	80037e6 <_lseek>
 8002c08:	1c43      	adds	r3, r0, #1
 8002c0a:	d102      	bne.n	8002c12 <_lseek_r+0x1e>
 8002c0c:	682b      	ldr	r3, [r5, #0]
 8002c0e:	b103      	cbz	r3, 8002c12 <_lseek_r+0x1e>
 8002c10:	6023      	str	r3, [r4, #0]
 8002c12:	bd38      	pop	{r3, r4, r5, pc}
 8002c14:	20000218 	.word	0x20000218

08002c18 <_read_r>:
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	4d07      	ldr	r5, [pc, #28]	@ (8002c38 <_read_r+0x20>)
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	4608      	mov	r0, r1
 8002c20:	4611      	mov	r1, r2
 8002c22:	2200      	movs	r2, #0
 8002c24:	602a      	str	r2, [r5, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 fd87 	bl	800373a <_read>
 8002c2c:	1c43      	adds	r3, r0, #1
 8002c2e:	d102      	bne.n	8002c36 <_read_r+0x1e>
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	b103      	cbz	r3, 8002c36 <_read_r+0x1e>
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	20000218 	.word	0x20000218

08002c3c <_write_r>:
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	4d07      	ldr	r5, [pc, #28]	@ (8002c5c <_write_r+0x20>)
 8002c40:	4604      	mov	r4, r0
 8002c42:	4608      	mov	r0, r1
 8002c44:	4611      	mov	r1, r2
 8002c46:	2200      	movs	r2, #0
 8002c48:	602a      	str	r2, [r5, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f000 fddd 	bl	800380a <_write>
 8002c50:	1c43      	adds	r3, r0, #1
 8002c52:	d102      	bne.n	8002c5a <_write_r+0x1e>
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	b103      	cbz	r3, 8002c5a <_write_r+0x1e>
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	bd38      	pop	{r3, r4, r5, pc}
 8002c5c:	20000218 	.word	0x20000218

08002c60 <__errno>:
 8002c60:	4b01      	ldr	r3, [pc, #4]	@ (8002c68 <__errno+0x8>)
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000018 	.word	0x20000018

08002c6c <__libc_init_array>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	4d0d      	ldr	r5, [pc, #52]	@ (8002ca4 <__libc_init_array+0x38>)
 8002c70:	4c0d      	ldr	r4, [pc, #52]	@ (8002ca8 <__libc_init_array+0x3c>)
 8002c72:	1b64      	subs	r4, r4, r5
 8002c74:	10a4      	asrs	r4, r4, #2
 8002c76:	2600      	movs	r6, #0
 8002c78:	42a6      	cmp	r6, r4
 8002c7a:	d109      	bne.n	8002c90 <__libc_init_array+0x24>
 8002c7c:	4d0b      	ldr	r5, [pc, #44]	@ (8002cac <__libc_init_array+0x40>)
 8002c7e:	4c0c      	ldr	r4, [pc, #48]	@ (8002cb0 <__libc_init_array+0x44>)
 8002c80:	f000 ffb4 	bl	8003bec <_init>
 8002c84:	1b64      	subs	r4, r4, r5
 8002c86:	10a4      	asrs	r4, r4, #2
 8002c88:	2600      	movs	r6, #0
 8002c8a:	42a6      	cmp	r6, r4
 8002c8c:	d105      	bne.n	8002c9a <__libc_init_array+0x2e>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c94:	4798      	blx	r3
 8002c96:	3601      	adds	r6, #1
 8002c98:	e7ee      	b.n	8002c78 <__libc_init_array+0xc>
 8002c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9e:	4798      	blx	r3
 8002ca0:	3601      	adds	r6, #1
 8002ca2:	e7f2      	b.n	8002c8a <__libc_init_array+0x1e>
 8002ca4:	08003e58 	.word	0x08003e58
 8002ca8:	08003e58 	.word	0x08003e58
 8002cac:	08003e58 	.word	0x08003e58
 8002cb0:	08003e5c 	.word	0x08003e5c

08002cb4 <__retarget_lock_init_recursive>:
 8002cb4:	4770      	bx	lr

08002cb6 <__retarget_lock_acquire_recursive>:
 8002cb6:	4770      	bx	lr

08002cb8 <__retarget_lock_release_recursive>:
 8002cb8:	4770      	bx	lr
	...

08002cbc <_free_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	d041      	beq.n	8002d48 <_free_r+0x8c>
 8002cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cc8:	1f0c      	subs	r4, r1, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bfb8      	it	lt
 8002cce:	18e4      	addlt	r4, r4, r3
 8002cd0:	f000 f8e0 	bl	8002e94 <__malloc_lock>
 8002cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d4c <_free_r+0x90>)
 8002cd6:	6813      	ldr	r3, [r2, #0]
 8002cd8:	b933      	cbnz	r3, 8002ce8 <_free_r+0x2c>
 8002cda:	6063      	str	r3, [r4, #4]
 8002cdc:	6014      	str	r4, [r2, #0]
 8002cde:	4628      	mov	r0, r5
 8002ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ce4:	f000 b8dc 	b.w	8002ea0 <__malloc_unlock>
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	d908      	bls.n	8002cfe <_free_r+0x42>
 8002cec:	6820      	ldr	r0, [r4, #0]
 8002cee:	1821      	adds	r1, r4, r0
 8002cf0:	428b      	cmp	r3, r1
 8002cf2:	bf01      	itttt	eq
 8002cf4:	6819      	ldreq	r1, [r3, #0]
 8002cf6:	685b      	ldreq	r3, [r3, #4]
 8002cf8:	1809      	addeq	r1, r1, r0
 8002cfa:	6021      	streq	r1, [r4, #0]
 8002cfc:	e7ed      	b.n	8002cda <_free_r+0x1e>
 8002cfe:	461a      	mov	r2, r3
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	b10b      	cbz	r3, 8002d08 <_free_r+0x4c>
 8002d04:	42a3      	cmp	r3, r4
 8002d06:	d9fa      	bls.n	8002cfe <_free_r+0x42>
 8002d08:	6811      	ldr	r1, [r2, #0]
 8002d0a:	1850      	adds	r0, r2, r1
 8002d0c:	42a0      	cmp	r0, r4
 8002d0e:	d10b      	bne.n	8002d28 <_free_r+0x6c>
 8002d10:	6820      	ldr	r0, [r4, #0]
 8002d12:	4401      	add	r1, r0
 8002d14:	1850      	adds	r0, r2, r1
 8002d16:	4283      	cmp	r3, r0
 8002d18:	6011      	str	r1, [r2, #0]
 8002d1a:	d1e0      	bne.n	8002cde <_free_r+0x22>
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	6053      	str	r3, [r2, #4]
 8002d22:	4408      	add	r0, r1
 8002d24:	6010      	str	r0, [r2, #0]
 8002d26:	e7da      	b.n	8002cde <_free_r+0x22>
 8002d28:	d902      	bls.n	8002d30 <_free_r+0x74>
 8002d2a:	230c      	movs	r3, #12
 8002d2c:	602b      	str	r3, [r5, #0]
 8002d2e:	e7d6      	b.n	8002cde <_free_r+0x22>
 8002d30:	6820      	ldr	r0, [r4, #0]
 8002d32:	1821      	adds	r1, r4, r0
 8002d34:	428b      	cmp	r3, r1
 8002d36:	bf04      	itt	eq
 8002d38:	6819      	ldreq	r1, [r3, #0]
 8002d3a:	685b      	ldreq	r3, [r3, #4]
 8002d3c:	6063      	str	r3, [r4, #4]
 8002d3e:	bf04      	itt	eq
 8002d40:	1809      	addeq	r1, r1, r0
 8002d42:	6021      	streq	r1, [r4, #0]
 8002d44:	6054      	str	r4, [r2, #4]
 8002d46:	e7ca      	b.n	8002cde <_free_r+0x22>
 8002d48:	bd38      	pop	{r3, r4, r5, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000224 	.word	0x20000224

08002d50 <sbrk_aligned>:
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	4e0f      	ldr	r6, [pc, #60]	@ (8002d90 <sbrk_aligned+0x40>)
 8002d54:	460c      	mov	r4, r1
 8002d56:	6831      	ldr	r1, [r6, #0]
 8002d58:	4605      	mov	r5, r0
 8002d5a:	b911      	cbnz	r1, 8002d62 <sbrk_aligned+0x12>
 8002d5c:	f000 fca0 	bl	80036a0 <_sbrk_r>
 8002d60:	6030      	str	r0, [r6, #0]
 8002d62:	4621      	mov	r1, r4
 8002d64:	4628      	mov	r0, r5
 8002d66:	f000 fc9b 	bl	80036a0 <_sbrk_r>
 8002d6a:	1c43      	adds	r3, r0, #1
 8002d6c:	d103      	bne.n	8002d76 <sbrk_aligned+0x26>
 8002d6e:	f04f 34ff 	mov.w	r4, #4294967295
 8002d72:	4620      	mov	r0, r4
 8002d74:	bd70      	pop	{r4, r5, r6, pc}
 8002d76:	1cc4      	adds	r4, r0, #3
 8002d78:	f024 0403 	bic.w	r4, r4, #3
 8002d7c:	42a0      	cmp	r0, r4
 8002d7e:	d0f8      	beq.n	8002d72 <sbrk_aligned+0x22>
 8002d80:	1a21      	subs	r1, r4, r0
 8002d82:	4628      	mov	r0, r5
 8002d84:	f000 fc8c 	bl	80036a0 <_sbrk_r>
 8002d88:	3001      	adds	r0, #1
 8002d8a:	d1f2      	bne.n	8002d72 <sbrk_aligned+0x22>
 8002d8c:	e7ef      	b.n	8002d6e <sbrk_aligned+0x1e>
 8002d8e:	bf00      	nop
 8002d90:	20000220 	.word	0x20000220

08002d94 <_malloc_r>:
 8002d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d98:	1ccd      	adds	r5, r1, #3
 8002d9a:	f025 0503 	bic.w	r5, r5, #3
 8002d9e:	3508      	adds	r5, #8
 8002da0:	2d0c      	cmp	r5, #12
 8002da2:	bf38      	it	cc
 8002da4:	250c      	movcc	r5, #12
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	4606      	mov	r6, r0
 8002daa:	db01      	blt.n	8002db0 <_malloc_r+0x1c>
 8002dac:	42a9      	cmp	r1, r5
 8002dae:	d904      	bls.n	8002dba <_malloc_r+0x26>
 8002db0:	230c      	movs	r3, #12
 8002db2:	6033      	str	r3, [r6, #0]
 8002db4:	2000      	movs	r0, #0
 8002db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e90 <_malloc_r+0xfc>
 8002dbe:	f000 f869 	bl	8002e94 <__malloc_lock>
 8002dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8002dc6:	461c      	mov	r4, r3
 8002dc8:	bb44      	cbnz	r4, 8002e1c <_malloc_r+0x88>
 8002dca:	4629      	mov	r1, r5
 8002dcc:	4630      	mov	r0, r6
 8002dce:	f7ff ffbf 	bl	8002d50 <sbrk_aligned>
 8002dd2:	1c43      	adds	r3, r0, #1
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	d158      	bne.n	8002e8a <_malloc_r+0xf6>
 8002dd8:	f8d8 4000 	ldr.w	r4, [r8]
 8002ddc:	4627      	mov	r7, r4
 8002dde:	2f00      	cmp	r7, #0
 8002de0:	d143      	bne.n	8002e6a <_malloc_r+0xd6>
 8002de2:	2c00      	cmp	r4, #0
 8002de4:	d04b      	beq.n	8002e7e <_malloc_r+0xea>
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	4639      	mov	r1, r7
 8002dea:	4630      	mov	r0, r6
 8002dec:	eb04 0903 	add.w	r9, r4, r3
 8002df0:	f000 fc56 	bl	80036a0 <_sbrk_r>
 8002df4:	4581      	cmp	r9, r0
 8002df6:	d142      	bne.n	8002e7e <_malloc_r+0xea>
 8002df8:	6821      	ldr	r1, [r4, #0]
 8002dfa:	1a6d      	subs	r5, r5, r1
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4630      	mov	r0, r6
 8002e00:	f7ff ffa6 	bl	8002d50 <sbrk_aligned>
 8002e04:	3001      	adds	r0, #1
 8002e06:	d03a      	beq.n	8002e7e <_malloc_r+0xea>
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	442b      	add	r3, r5
 8002e0c:	6023      	str	r3, [r4, #0]
 8002e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	bb62      	cbnz	r2, 8002e70 <_malloc_r+0xdc>
 8002e16:	f8c8 7000 	str.w	r7, [r8]
 8002e1a:	e00f      	b.n	8002e3c <_malloc_r+0xa8>
 8002e1c:	6822      	ldr	r2, [r4, #0]
 8002e1e:	1b52      	subs	r2, r2, r5
 8002e20:	d420      	bmi.n	8002e64 <_malloc_r+0xd0>
 8002e22:	2a0b      	cmp	r2, #11
 8002e24:	d917      	bls.n	8002e56 <_malloc_r+0xc2>
 8002e26:	1961      	adds	r1, r4, r5
 8002e28:	42a3      	cmp	r3, r4
 8002e2a:	6025      	str	r5, [r4, #0]
 8002e2c:	bf18      	it	ne
 8002e2e:	6059      	strne	r1, [r3, #4]
 8002e30:	6863      	ldr	r3, [r4, #4]
 8002e32:	bf08      	it	eq
 8002e34:	f8c8 1000 	streq.w	r1, [r8]
 8002e38:	5162      	str	r2, [r4, r5]
 8002e3a:	604b      	str	r3, [r1, #4]
 8002e3c:	4630      	mov	r0, r6
 8002e3e:	f000 f82f 	bl	8002ea0 <__malloc_unlock>
 8002e42:	f104 000b 	add.w	r0, r4, #11
 8002e46:	1d23      	adds	r3, r4, #4
 8002e48:	f020 0007 	bic.w	r0, r0, #7
 8002e4c:	1ac2      	subs	r2, r0, r3
 8002e4e:	bf1c      	itt	ne
 8002e50:	1a1b      	subne	r3, r3, r0
 8002e52:	50a3      	strne	r3, [r4, r2]
 8002e54:	e7af      	b.n	8002db6 <_malloc_r+0x22>
 8002e56:	6862      	ldr	r2, [r4, #4]
 8002e58:	42a3      	cmp	r3, r4
 8002e5a:	bf0c      	ite	eq
 8002e5c:	f8c8 2000 	streq.w	r2, [r8]
 8002e60:	605a      	strne	r2, [r3, #4]
 8002e62:	e7eb      	b.n	8002e3c <_malloc_r+0xa8>
 8002e64:	4623      	mov	r3, r4
 8002e66:	6864      	ldr	r4, [r4, #4]
 8002e68:	e7ae      	b.n	8002dc8 <_malloc_r+0x34>
 8002e6a:	463c      	mov	r4, r7
 8002e6c:	687f      	ldr	r7, [r7, #4]
 8002e6e:	e7b6      	b.n	8002dde <_malloc_r+0x4a>
 8002e70:	461a      	mov	r2, r3
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	42a3      	cmp	r3, r4
 8002e76:	d1fb      	bne.n	8002e70 <_malloc_r+0xdc>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	6053      	str	r3, [r2, #4]
 8002e7c:	e7de      	b.n	8002e3c <_malloc_r+0xa8>
 8002e7e:	230c      	movs	r3, #12
 8002e80:	6033      	str	r3, [r6, #0]
 8002e82:	4630      	mov	r0, r6
 8002e84:	f000 f80c 	bl	8002ea0 <__malloc_unlock>
 8002e88:	e794      	b.n	8002db4 <_malloc_r+0x20>
 8002e8a:	6005      	str	r5, [r0, #0]
 8002e8c:	e7d6      	b.n	8002e3c <_malloc_r+0xa8>
 8002e8e:	bf00      	nop
 8002e90:	20000224 	.word	0x20000224

08002e94 <__malloc_lock>:
 8002e94:	4801      	ldr	r0, [pc, #4]	@ (8002e9c <__malloc_lock+0x8>)
 8002e96:	f7ff bf0e 	b.w	8002cb6 <__retarget_lock_acquire_recursive>
 8002e9a:	bf00      	nop
 8002e9c:	2000021c 	.word	0x2000021c

08002ea0 <__malloc_unlock>:
 8002ea0:	4801      	ldr	r0, [pc, #4]	@ (8002ea8 <__malloc_unlock+0x8>)
 8002ea2:	f7ff bf09 	b.w	8002cb8 <__retarget_lock_release_recursive>
 8002ea6:	bf00      	nop
 8002ea8:	2000021c 	.word	0x2000021c

08002eac <__sfputc_r>:
 8002eac:	6893      	ldr	r3, [r2, #8]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	b410      	push	{r4}
 8002eb4:	6093      	str	r3, [r2, #8]
 8002eb6:	da07      	bge.n	8002ec8 <__sfputc_r+0x1c>
 8002eb8:	6994      	ldr	r4, [r2, #24]
 8002eba:	42a3      	cmp	r3, r4
 8002ebc:	db01      	blt.n	8002ec2 <__sfputc_r+0x16>
 8002ebe:	290a      	cmp	r1, #10
 8002ec0:	d102      	bne.n	8002ec8 <__sfputc_r+0x1c>
 8002ec2:	bc10      	pop	{r4}
 8002ec4:	f7ff bde9 	b.w	8002a9a <__swbuf_r>
 8002ec8:	6813      	ldr	r3, [r2, #0]
 8002eca:	1c58      	adds	r0, r3, #1
 8002ecc:	6010      	str	r0, [r2, #0]
 8002ece:	7019      	strb	r1, [r3, #0]
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	bc10      	pop	{r4}
 8002ed4:	4770      	bx	lr

08002ed6 <__sfputs_r>:
 8002ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed8:	4606      	mov	r6, r0
 8002eda:	460f      	mov	r7, r1
 8002edc:	4614      	mov	r4, r2
 8002ede:	18d5      	adds	r5, r2, r3
 8002ee0:	42ac      	cmp	r4, r5
 8002ee2:	d101      	bne.n	8002ee8 <__sfputs_r+0x12>
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	e007      	b.n	8002ef8 <__sfputs_r+0x22>
 8002ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eec:	463a      	mov	r2, r7
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f7ff ffdc 	bl	8002eac <__sfputc_r>
 8002ef4:	1c43      	adds	r3, r0, #1
 8002ef6:	d1f3      	bne.n	8002ee0 <__sfputs_r+0xa>
 8002ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002efc <_vfiprintf_r>:
 8002efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f00:	460d      	mov	r5, r1
 8002f02:	b09d      	sub	sp, #116	@ 0x74
 8002f04:	4614      	mov	r4, r2
 8002f06:	4698      	mov	r8, r3
 8002f08:	4606      	mov	r6, r0
 8002f0a:	b118      	cbz	r0, 8002f14 <_vfiprintf_r+0x18>
 8002f0c:	6a03      	ldr	r3, [r0, #32]
 8002f0e:	b90b      	cbnz	r3, 8002f14 <_vfiprintf_r+0x18>
 8002f10:	f7ff fcda 	bl	80028c8 <__sinit>
 8002f14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002f16:	07d9      	lsls	r1, r3, #31
 8002f18:	d405      	bmi.n	8002f26 <_vfiprintf_r+0x2a>
 8002f1a:	89ab      	ldrh	r3, [r5, #12]
 8002f1c:	059a      	lsls	r2, r3, #22
 8002f1e:	d402      	bmi.n	8002f26 <_vfiprintf_r+0x2a>
 8002f20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002f22:	f7ff fec8 	bl	8002cb6 <__retarget_lock_acquire_recursive>
 8002f26:	89ab      	ldrh	r3, [r5, #12]
 8002f28:	071b      	lsls	r3, r3, #28
 8002f2a:	d501      	bpl.n	8002f30 <_vfiprintf_r+0x34>
 8002f2c:	692b      	ldr	r3, [r5, #16]
 8002f2e:	b99b      	cbnz	r3, 8002f58 <_vfiprintf_r+0x5c>
 8002f30:	4629      	mov	r1, r5
 8002f32:	4630      	mov	r0, r6
 8002f34:	f7ff fdf0 	bl	8002b18 <__swsetup_r>
 8002f38:	b170      	cbz	r0, 8002f58 <_vfiprintf_r+0x5c>
 8002f3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002f3c:	07dc      	lsls	r4, r3, #31
 8002f3e:	d504      	bpl.n	8002f4a <_vfiprintf_r+0x4e>
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	b01d      	add	sp, #116	@ 0x74
 8002f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f4a:	89ab      	ldrh	r3, [r5, #12]
 8002f4c:	0598      	lsls	r0, r3, #22
 8002f4e:	d4f7      	bmi.n	8002f40 <_vfiprintf_r+0x44>
 8002f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002f52:	f7ff feb1 	bl	8002cb8 <__retarget_lock_release_recursive>
 8002f56:	e7f3      	b.n	8002f40 <_vfiprintf_r+0x44>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f66:	2330      	movs	r3, #48	@ 0x30
 8002f68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003118 <_vfiprintf_r+0x21c>
 8002f6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f70:	f04f 0901 	mov.w	r9, #1
 8002f74:	4623      	mov	r3, r4
 8002f76:	469a      	mov	sl, r3
 8002f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f7c:	b10a      	cbz	r2, 8002f82 <_vfiprintf_r+0x86>
 8002f7e:	2a25      	cmp	r2, #37	@ 0x25
 8002f80:	d1f9      	bne.n	8002f76 <_vfiprintf_r+0x7a>
 8002f82:	ebba 0b04 	subs.w	fp, sl, r4
 8002f86:	d00b      	beq.n	8002fa0 <_vfiprintf_r+0xa4>
 8002f88:	465b      	mov	r3, fp
 8002f8a:	4622      	mov	r2, r4
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f7ff ffa1 	bl	8002ed6 <__sfputs_r>
 8002f94:	3001      	adds	r0, #1
 8002f96:	f000 80a7 	beq.w	80030e8 <_vfiprintf_r+0x1ec>
 8002f9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f9c:	445a      	add	r2, fp
 8002f9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 809f 	beq.w	80030e8 <_vfiprintf_r+0x1ec>
 8002faa:	2300      	movs	r3, #0
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fb4:	f10a 0a01 	add.w	sl, sl, #1
 8002fb8:	9304      	str	r3, [sp, #16]
 8002fba:	9307      	str	r3, [sp, #28]
 8002fbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002fc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8002fc2:	4654      	mov	r4, sl
 8002fc4:	2205      	movs	r2, #5
 8002fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fca:	4853      	ldr	r0, [pc, #332]	@ (8003118 <_vfiprintf_r+0x21c>)
 8002fcc:	f7fd f920 	bl	8000210 <memchr>
 8002fd0:	9a04      	ldr	r2, [sp, #16]
 8002fd2:	b9d8      	cbnz	r0, 800300c <_vfiprintf_r+0x110>
 8002fd4:	06d1      	lsls	r1, r2, #27
 8002fd6:	bf44      	itt	mi
 8002fd8:	2320      	movmi	r3, #32
 8002fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fde:	0713      	lsls	r3, r2, #28
 8002fe0:	bf44      	itt	mi
 8002fe2:	232b      	movmi	r3, #43	@ 0x2b
 8002fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8002fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fee:	d015      	beq.n	800301c <_vfiprintf_r+0x120>
 8002ff0:	9a07      	ldr	r2, [sp, #28]
 8002ff2:	4654      	mov	r4, sl
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f04f 0c0a 	mov.w	ip, #10
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003000:	3b30      	subs	r3, #48	@ 0x30
 8003002:	2b09      	cmp	r3, #9
 8003004:	d94b      	bls.n	800309e <_vfiprintf_r+0x1a2>
 8003006:	b1b0      	cbz	r0, 8003036 <_vfiprintf_r+0x13a>
 8003008:	9207      	str	r2, [sp, #28]
 800300a:	e014      	b.n	8003036 <_vfiprintf_r+0x13a>
 800300c:	eba0 0308 	sub.w	r3, r0, r8
 8003010:	fa09 f303 	lsl.w	r3, r9, r3
 8003014:	4313      	orrs	r3, r2
 8003016:	9304      	str	r3, [sp, #16]
 8003018:	46a2      	mov	sl, r4
 800301a:	e7d2      	b.n	8002fc2 <_vfiprintf_r+0xc6>
 800301c:	9b03      	ldr	r3, [sp, #12]
 800301e:	1d19      	adds	r1, r3, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	9103      	str	r1, [sp, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	bfbb      	ittet	lt
 8003028:	425b      	neglt	r3, r3
 800302a:	f042 0202 	orrlt.w	r2, r2, #2
 800302e:	9307      	strge	r3, [sp, #28]
 8003030:	9307      	strlt	r3, [sp, #28]
 8003032:	bfb8      	it	lt
 8003034:	9204      	strlt	r2, [sp, #16]
 8003036:	7823      	ldrb	r3, [r4, #0]
 8003038:	2b2e      	cmp	r3, #46	@ 0x2e
 800303a:	d10a      	bne.n	8003052 <_vfiprintf_r+0x156>
 800303c:	7863      	ldrb	r3, [r4, #1]
 800303e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003040:	d132      	bne.n	80030a8 <_vfiprintf_r+0x1ac>
 8003042:	9b03      	ldr	r3, [sp, #12]
 8003044:	1d1a      	adds	r2, r3, #4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	9203      	str	r2, [sp, #12]
 800304a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800304e:	3402      	adds	r4, #2
 8003050:	9305      	str	r3, [sp, #20]
 8003052:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800311c <_vfiprintf_r+0x220>
 8003056:	7821      	ldrb	r1, [r4, #0]
 8003058:	2203      	movs	r2, #3
 800305a:	4650      	mov	r0, sl
 800305c:	f7fd f8d8 	bl	8000210 <memchr>
 8003060:	b138      	cbz	r0, 8003072 <_vfiprintf_r+0x176>
 8003062:	9b04      	ldr	r3, [sp, #16]
 8003064:	eba0 000a 	sub.w	r0, r0, sl
 8003068:	2240      	movs	r2, #64	@ 0x40
 800306a:	4082      	lsls	r2, r0
 800306c:	4313      	orrs	r3, r2
 800306e:	3401      	adds	r4, #1
 8003070:	9304      	str	r3, [sp, #16]
 8003072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003076:	482a      	ldr	r0, [pc, #168]	@ (8003120 <_vfiprintf_r+0x224>)
 8003078:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800307c:	2206      	movs	r2, #6
 800307e:	f7fd f8c7 	bl	8000210 <memchr>
 8003082:	2800      	cmp	r0, #0
 8003084:	d03f      	beq.n	8003106 <_vfiprintf_r+0x20a>
 8003086:	4b27      	ldr	r3, [pc, #156]	@ (8003124 <_vfiprintf_r+0x228>)
 8003088:	bb1b      	cbnz	r3, 80030d2 <_vfiprintf_r+0x1d6>
 800308a:	9b03      	ldr	r3, [sp, #12]
 800308c:	3307      	adds	r3, #7
 800308e:	f023 0307 	bic.w	r3, r3, #7
 8003092:	3308      	adds	r3, #8
 8003094:	9303      	str	r3, [sp, #12]
 8003096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003098:	443b      	add	r3, r7
 800309a:	9309      	str	r3, [sp, #36]	@ 0x24
 800309c:	e76a      	b.n	8002f74 <_vfiprintf_r+0x78>
 800309e:	fb0c 3202 	mla	r2, ip, r2, r3
 80030a2:	460c      	mov	r4, r1
 80030a4:	2001      	movs	r0, #1
 80030a6:	e7a8      	b.n	8002ffa <_vfiprintf_r+0xfe>
 80030a8:	2300      	movs	r3, #0
 80030aa:	3401      	adds	r4, #1
 80030ac:	9305      	str	r3, [sp, #20]
 80030ae:	4619      	mov	r1, r3
 80030b0:	f04f 0c0a 	mov.w	ip, #10
 80030b4:	4620      	mov	r0, r4
 80030b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030ba:	3a30      	subs	r2, #48	@ 0x30
 80030bc:	2a09      	cmp	r2, #9
 80030be:	d903      	bls.n	80030c8 <_vfiprintf_r+0x1cc>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0c6      	beq.n	8003052 <_vfiprintf_r+0x156>
 80030c4:	9105      	str	r1, [sp, #20]
 80030c6:	e7c4      	b.n	8003052 <_vfiprintf_r+0x156>
 80030c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80030cc:	4604      	mov	r4, r0
 80030ce:	2301      	movs	r3, #1
 80030d0:	e7f0      	b.n	80030b4 <_vfiprintf_r+0x1b8>
 80030d2:	ab03      	add	r3, sp, #12
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	462a      	mov	r2, r5
 80030d8:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <_vfiprintf_r+0x22c>)
 80030da:	a904      	add	r1, sp, #16
 80030dc:	4630      	mov	r0, r6
 80030de:	f3af 8000 	nop.w
 80030e2:	4607      	mov	r7, r0
 80030e4:	1c78      	adds	r0, r7, #1
 80030e6:	d1d6      	bne.n	8003096 <_vfiprintf_r+0x19a>
 80030e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80030ea:	07d9      	lsls	r1, r3, #31
 80030ec:	d405      	bmi.n	80030fa <_vfiprintf_r+0x1fe>
 80030ee:	89ab      	ldrh	r3, [r5, #12]
 80030f0:	059a      	lsls	r2, r3, #22
 80030f2:	d402      	bmi.n	80030fa <_vfiprintf_r+0x1fe>
 80030f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80030f6:	f7ff fddf 	bl	8002cb8 <__retarget_lock_release_recursive>
 80030fa:	89ab      	ldrh	r3, [r5, #12]
 80030fc:	065b      	lsls	r3, r3, #25
 80030fe:	f53f af1f 	bmi.w	8002f40 <_vfiprintf_r+0x44>
 8003102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003104:	e71e      	b.n	8002f44 <_vfiprintf_r+0x48>
 8003106:	ab03      	add	r3, sp, #12
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	462a      	mov	r2, r5
 800310c:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <_vfiprintf_r+0x22c>)
 800310e:	a904      	add	r1, sp, #16
 8003110:	4630      	mov	r0, r6
 8003112:	f000 f879 	bl	8003208 <_printf_i>
 8003116:	e7e4      	b.n	80030e2 <_vfiprintf_r+0x1e6>
 8003118:	08003e00 	.word	0x08003e00
 800311c:	08003e06 	.word	0x08003e06
 8003120:	08003e0a 	.word	0x08003e0a
 8003124:	00000000 	.word	0x00000000
 8003128:	08002ed7 	.word	0x08002ed7

0800312c <_printf_common>:
 800312c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003130:	4616      	mov	r6, r2
 8003132:	4698      	mov	r8, r3
 8003134:	688a      	ldr	r2, [r1, #8]
 8003136:	690b      	ldr	r3, [r1, #16]
 8003138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800313c:	4293      	cmp	r3, r2
 800313e:	bfb8      	it	lt
 8003140:	4613      	movlt	r3, r2
 8003142:	6033      	str	r3, [r6, #0]
 8003144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003148:	4607      	mov	r7, r0
 800314a:	460c      	mov	r4, r1
 800314c:	b10a      	cbz	r2, 8003152 <_printf_common+0x26>
 800314e:	3301      	adds	r3, #1
 8003150:	6033      	str	r3, [r6, #0]
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	0699      	lsls	r1, r3, #26
 8003156:	bf42      	ittt	mi
 8003158:	6833      	ldrmi	r3, [r6, #0]
 800315a:	3302      	addmi	r3, #2
 800315c:	6033      	strmi	r3, [r6, #0]
 800315e:	6825      	ldr	r5, [r4, #0]
 8003160:	f015 0506 	ands.w	r5, r5, #6
 8003164:	d106      	bne.n	8003174 <_printf_common+0x48>
 8003166:	f104 0a19 	add.w	sl, r4, #25
 800316a:	68e3      	ldr	r3, [r4, #12]
 800316c:	6832      	ldr	r2, [r6, #0]
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	42ab      	cmp	r3, r5
 8003172:	dc26      	bgt.n	80031c2 <_printf_common+0x96>
 8003174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003178:	6822      	ldr	r2, [r4, #0]
 800317a:	3b00      	subs	r3, #0
 800317c:	bf18      	it	ne
 800317e:	2301      	movne	r3, #1
 8003180:	0692      	lsls	r2, r2, #26
 8003182:	d42b      	bmi.n	80031dc <_printf_common+0xb0>
 8003184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003188:	4641      	mov	r1, r8
 800318a:	4638      	mov	r0, r7
 800318c:	47c8      	blx	r9
 800318e:	3001      	adds	r0, #1
 8003190:	d01e      	beq.n	80031d0 <_printf_common+0xa4>
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	6922      	ldr	r2, [r4, #16]
 8003196:	f003 0306 	and.w	r3, r3, #6
 800319a:	2b04      	cmp	r3, #4
 800319c:	bf02      	ittt	eq
 800319e:	68e5      	ldreq	r5, [r4, #12]
 80031a0:	6833      	ldreq	r3, [r6, #0]
 80031a2:	1aed      	subeq	r5, r5, r3
 80031a4:	68a3      	ldr	r3, [r4, #8]
 80031a6:	bf0c      	ite	eq
 80031a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031ac:	2500      	movne	r5, #0
 80031ae:	4293      	cmp	r3, r2
 80031b0:	bfc4      	itt	gt
 80031b2:	1a9b      	subgt	r3, r3, r2
 80031b4:	18ed      	addgt	r5, r5, r3
 80031b6:	2600      	movs	r6, #0
 80031b8:	341a      	adds	r4, #26
 80031ba:	42b5      	cmp	r5, r6
 80031bc:	d11a      	bne.n	80031f4 <_printf_common+0xc8>
 80031be:	2000      	movs	r0, #0
 80031c0:	e008      	b.n	80031d4 <_printf_common+0xa8>
 80031c2:	2301      	movs	r3, #1
 80031c4:	4652      	mov	r2, sl
 80031c6:	4641      	mov	r1, r8
 80031c8:	4638      	mov	r0, r7
 80031ca:	47c8      	blx	r9
 80031cc:	3001      	adds	r0, #1
 80031ce:	d103      	bne.n	80031d8 <_printf_common+0xac>
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d8:	3501      	adds	r5, #1
 80031da:	e7c6      	b.n	800316a <_printf_common+0x3e>
 80031dc:	18e1      	adds	r1, r4, r3
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	2030      	movs	r0, #48	@ 0x30
 80031e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80031e6:	4422      	add	r2, r4
 80031e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80031ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80031f0:	3302      	adds	r3, #2
 80031f2:	e7c7      	b.n	8003184 <_printf_common+0x58>
 80031f4:	2301      	movs	r3, #1
 80031f6:	4622      	mov	r2, r4
 80031f8:	4641      	mov	r1, r8
 80031fa:	4638      	mov	r0, r7
 80031fc:	47c8      	blx	r9
 80031fe:	3001      	adds	r0, #1
 8003200:	d0e6      	beq.n	80031d0 <_printf_common+0xa4>
 8003202:	3601      	adds	r6, #1
 8003204:	e7d9      	b.n	80031ba <_printf_common+0x8e>
	...

08003208 <_printf_i>:
 8003208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800320c:	7e0f      	ldrb	r7, [r1, #24]
 800320e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003210:	2f78      	cmp	r7, #120	@ 0x78
 8003212:	4691      	mov	r9, r2
 8003214:	4680      	mov	r8, r0
 8003216:	460c      	mov	r4, r1
 8003218:	469a      	mov	sl, r3
 800321a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800321e:	d807      	bhi.n	8003230 <_printf_i+0x28>
 8003220:	2f62      	cmp	r7, #98	@ 0x62
 8003222:	d80a      	bhi.n	800323a <_printf_i+0x32>
 8003224:	2f00      	cmp	r7, #0
 8003226:	f000 80d2 	beq.w	80033ce <_printf_i+0x1c6>
 800322a:	2f58      	cmp	r7, #88	@ 0x58
 800322c:	f000 80b9 	beq.w	80033a2 <_printf_i+0x19a>
 8003230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003238:	e03a      	b.n	80032b0 <_printf_i+0xa8>
 800323a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800323e:	2b15      	cmp	r3, #21
 8003240:	d8f6      	bhi.n	8003230 <_printf_i+0x28>
 8003242:	a101      	add	r1, pc, #4	@ (adr r1, 8003248 <_printf_i+0x40>)
 8003244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003248:	080032a1 	.word	0x080032a1
 800324c:	080032b5 	.word	0x080032b5
 8003250:	08003231 	.word	0x08003231
 8003254:	08003231 	.word	0x08003231
 8003258:	08003231 	.word	0x08003231
 800325c:	08003231 	.word	0x08003231
 8003260:	080032b5 	.word	0x080032b5
 8003264:	08003231 	.word	0x08003231
 8003268:	08003231 	.word	0x08003231
 800326c:	08003231 	.word	0x08003231
 8003270:	08003231 	.word	0x08003231
 8003274:	080033b5 	.word	0x080033b5
 8003278:	080032df 	.word	0x080032df
 800327c:	0800336f 	.word	0x0800336f
 8003280:	08003231 	.word	0x08003231
 8003284:	08003231 	.word	0x08003231
 8003288:	080033d7 	.word	0x080033d7
 800328c:	08003231 	.word	0x08003231
 8003290:	080032df 	.word	0x080032df
 8003294:	08003231 	.word	0x08003231
 8003298:	08003231 	.word	0x08003231
 800329c:	08003377 	.word	0x08003377
 80032a0:	6833      	ldr	r3, [r6, #0]
 80032a2:	1d1a      	adds	r2, r3, #4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6032      	str	r2, [r6, #0]
 80032a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80032b0:	2301      	movs	r3, #1
 80032b2:	e09d      	b.n	80033f0 <_printf_i+0x1e8>
 80032b4:	6833      	ldr	r3, [r6, #0]
 80032b6:	6820      	ldr	r0, [r4, #0]
 80032b8:	1d19      	adds	r1, r3, #4
 80032ba:	6031      	str	r1, [r6, #0]
 80032bc:	0606      	lsls	r6, r0, #24
 80032be:	d501      	bpl.n	80032c4 <_printf_i+0xbc>
 80032c0:	681d      	ldr	r5, [r3, #0]
 80032c2:	e003      	b.n	80032cc <_printf_i+0xc4>
 80032c4:	0645      	lsls	r5, r0, #25
 80032c6:	d5fb      	bpl.n	80032c0 <_printf_i+0xb8>
 80032c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80032cc:	2d00      	cmp	r5, #0
 80032ce:	da03      	bge.n	80032d8 <_printf_i+0xd0>
 80032d0:	232d      	movs	r3, #45	@ 0x2d
 80032d2:	426d      	negs	r5, r5
 80032d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032d8:	4859      	ldr	r0, [pc, #356]	@ (8003440 <_printf_i+0x238>)
 80032da:	230a      	movs	r3, #10
 80032dc:	e011      	b.n	8003302 <_printf_i+0xfa>
 80032de:	6821      	ldr	r1, [r4, #0]
 80032e0:	6833      	ldr	r3, [r6, #0]
 80032e2:	0608      	lsls	r0, r1, #24
 80032e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80032e8:	d402      	bmi.n	80032f0 <_printf_i+0xe8>
 80032ea:	0649      	lsls	r1, r1, #25
 80032ec:	bf48      	it	mi
 80032ee:	b2ad      	uxthmi	r5, r5
 80032f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80032f2:	4853      	ldr	r0, [pc, #332]	@ (8003440 <_printf_i+0x238>)
 80032f4:	6033      	str	r3, [r6, #0]
 80032f6:	bf14      	ite	ne
 80032f8:	230a      	movne	r3, #10
 80032fa:	2308      	moveq	r3, #8
 80032fc:	2100      	movs	r1, #0
 80032fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003302:	6866      	ldr	r6, [r4, #4]
 8003304:	60a6      	str	r6, [r4, #8]
 8003306:	2e00      	cmp	r6, #0
 8003308:	bfa2      	ittt	ge
 800330a:	6821      	ldrge	r1, [r4, #0]
 800330c:	f021 0104 	bicge.w	r1, r1, #4
 8003310:	6021      	strge	r1, [r4, #0]
 8003312:	b90d      	cbnz	r5, 8003318 <_printf_i+0x110>
 8003314:	2e00      	cmp	r6, #0
 8003316:	d04b      	beq.n	80033b0 <_printf_i+0x1a8>
 8003318:	4616      	mov	r6, r2
 800331a:	fbb5 f1f3 	udiv	r1, r5, r3
 800331e:	fb03 5711 	mls	r7, r3, r1, r5
 8003322:	5dc7      	ldrb	r7, [r0, r7]
 8003324:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003328:	462f      	mov	r7, r5
 800332a:	42bb      	cmp	r3, r7
 800332c:	460d      	mov	r5, r1
 800332e:	d9f4      	bls.n	800331a <_printf_i+0x112>
 8003330:	2b08      	cmp	r3, #8
 8003332:	d10b      	bne.n	800334c <_printf_i+0x144>
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	07df      	lsls	r7, r3, #31
 8003338:	d508      	bpl.n	800334c <_printf_i+0x144>
 800333a:	6923      	ldr	r3, [r4, #16]
 800333c:	6861      	ldr	r1, [r4, #4]
 800333e:	4299      	cmp	r1, r3
 8003340:	bfde      	ittt	le
 8003342:	2330      	movle	r3, #48	@ 0x30
 8003344:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003348:	f106 36ff 	addle.w	r6, r6, #4294967295
 800334c:	1b92      	subs	r2, r2, r6
 800334e:	6122      	str	r2, [r4, #16]
 8003350:	f8cd a000 	str.w	sl, [sp]
 8003354:	464b      	mov	r3, r9
 8003356:	aa03      	add	r2, sp, #12
 8003358:	4621      	mov	r1, r4
 800335a:	4640      	mov	r0, r8
 800335c:	f7ff fee6 	bl	800312c <_printf_common>
 8003360:	3001      	adds	r0, #1
 8003362:	d14a      	bne.n	80033fa <_printf_i+0x1f2>
 8003364:	f04f 30ff 	mov.w	r0, #4294967295
 8003368:	b004      	add	sp, #16
 800336a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	f043 0320 	orr.w	r3, r3, #32
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	4833      	ldr	r0, [pc, #204]	@ (8003444 <_printf_i+0x23c>)
 8003378:	2778      	movs	r7, #120	@ 0x78
 800337a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	6831      	ldr	r1, [r6, #0]
 8003382:	061f      	lsls	r7, r3, #24
 8003384:	f851 5b04 	ldr.w	r5, [r1], #4
 8003388:	d402      	bmi.n	8003390 <_printf_i+0x188>
 800338a:	065f      	lsls	r7, r3, #25
 800338c:	bf48      	it	mi
 800338e:	b2ad      	uxthmi	r5, r5
 8003390:	6031      	str	r1, [r6, #0]
 8003392:	07d9      	lsls	r1, r3, #31
 8003394:	bf44      	itt	mi
 8003396:	f043 0320 	orrmi.w	r3, r3, #32
 800339a:	6023      	strmi	r3, [r4, #0]
 800339c:	b11d      	cbz	r5, 80033a6 <_printf_i+0x19e>
 800339e:	2310      	movs	r3, #16
 80033a0:	e7ac      	b.n	80032fc <_printf_i+0xf4>
 80033a2:	4827      	ldr	r0, [pc, #156]	@ (8003440 <_printf_i+0x238>)
 80033a4:	e7e9      	b.n	800337a <_printf_i+0x172>
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	f023 0320 	bic.w	r3, r3, #32
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	e7f6      	b.n	800339e <_printf_i+0x196>
 80033b0:	4616      	mov	r6, r2
 80033b2:	e7bd      	b.n	8003330 <_printf_i+0x128>
 80033b4:	6833      	ldr	r3, [r6, #0]
 80033b6:	6825      	ldr	r5, [r4, #0]
 80033b8:	6961      	ldr	r1, [r4, #20]
 80033ba:	1d18      	adds	r0, r3, #4
 80033bc:	6030      	str	r0, [r6, #0]
 80033be:	062e      	lsls	r6, r5, #24
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	d501      	bpl.n	80033c8 <_printf_i+0x1c0>
 80033c4:	6019      	str	r1, [r3, #0]
 80033c6:	e002      	b.n	80033ce <_printf_i+0x1c6>
 80033c8:	0668      	lsls	r0, r5, #25
 80033ca:	d5fb      	bpl.n	80033c4 <_printf_i+0x1bc>
 80033cc:	8019      	strh	r1, [r3, #0]
 80033ce:	2300      	movs	r3, #0
 80033d0:	6123      	str	r3, [r4, #16]
 80033d2:	4616      	mov	r6, r2
 80033d4:	e7bc      	b.n	8003350 <_printf_i+0x148>
 80033d6:	6833      	ldr	r3, [r6, #0]
 80033d8:	1d1a      	adds	r2, r3, #4
 80033da:	6032      	str	r2, [r6, #0]
 80033dc:	681e      	ldr	r6, [r3, #0]
 80033de:	6862      	ldr	r2, [r4, #4]
 80033e0:	2100      	movs	r1, #0
 80033e2:	4630      	mov	r0, r6
 80033e4:	f7fc ff14 	bl	8000210 <memchr>
 80033e8:	b108      	cbz	r0, 80033ee <_printf_i+0x1e6>
 80033ea:	1b80      	subs	r0, r0, r6
 80033ec:	6060      	str	r0, [r4, #4]
 80033ee:	6863      	ldr	r3, [r4, #4]
 80033f0:	6123      	str	r3, [r4, #16]
 80033f2:	2300      	movs	r3, #0
 80033f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033f8:	e7aa      	b.n	8003350 <_printf_i+0x148>
 80033fa:	6923      	ldr	r3, [r4, #16]
 80033fc:	4632      	mov	r2, r6
 80033fe:	4649      	mov	r1, r9
 8003400:	4640      	mov	r0, r8
 8003402:	47d0      	blx	sl
 8003404:	3001      	adds	r0, #1
 8003406:	d0ad      	beq.n	8003364 <_printf_i+0x15c>
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	079b      	lsls	r3, r3, #30
 800340c:	d413      	bmi.n	8003436 <_printf_i+0x22e>
 800340e:	68e0      	ldr	r0, [r4, #12]
 8003410:	9b03      	ldr	r3, [sp, #12]
 8003412:	4298      	cmp	r0, r3
 8003414:	bfb8      	it	lt
 8003416:	4618      	movlt	r0, r3
 8003418:	e7a6      	b.n	8003368 <_printf_i+0x160>
 800341a:	2301      	movs	r3, #1
 800341c:	4632      	mov	r2, r6
 800341e:	4649      	mov	r1, r9
 8003420:	4640      	mov	r0, r8
 8003422:	47d0      	blx	sl
 8003424:	3001      	adds	r0, #1
 8003426:	d09d      	beq.n	8003364 <_printf_i+0x15c>
 8003428:	3501      	adds	r5, #1
 800342a:	68e3      	ldr	r3, [r4, #12]
 800342c:	9903      	ldr	r1, [sp, #12]
 800342e:	1a5b      	subs	r3, r3, r1
 8003430:	42ab      	cmp	r3, r5
 8003432:	dcf2      	bgt.n	800341a <_printf_i+0x212>
 8003434:	e7eb      	b.n	800340e <_printf_i+0x206>
 8003436:	2500      	movs	r5, #0
 8003438:	f104 0619 	add.w	r6, r4, #25
 800343c:	e7f5      	b.n	800342a <_printf_i+0x222>
 800343e:	bf00      	nop
 8003440:	08003e11 	.word	0x08003e11
 8003444:	08003e22 	.word	0x08003e22

08003448 <__sflush_r>:
 8003448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	0716      	lsls	r6, r2, #28
 8003450:	4605      	mov	r5, r0
 8003452:	460c      	mov	r4, r1
 8003454:	d454      	bmi.n	8003500 <__sflush_r+0xb8>
 8003456:	684b      	ldr	r3, [r1, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	dc02      	bgt.n	8003462 <__sflush_r+0x1a>
 800345c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	dd48      	ble.n	80034f4 <__sflush_r+0xac>
 8003462:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003464:	2e00      	cmp	r6, #0
 8003466:	d045      	beq.n	80034f4 <__sflush_r+0xac>
 8003468:	2300      	movs	r3, #0
 800346a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800346e:	682f      	ldr	r7, [r5, #0]
 8003470:	6a21      	ldr	r1, [r4, #32]
 8003472:	602b      	str	r3, [r5, #0]
 8003474:	d030      	beq.n	80034d8 <__sflush_r+0x90>
 8003476:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003478:	89a3      	ldrh	r3, [r4, #12]
 800347a:	0759      	lsls	r1, r3, #29
 800347c:	d505      	bpl.n	800348a <__sflush_r+0x42>
 800347e:	6863      	ldr	r3, [r4, #4]
 8003480:	1ad2      	subs	r2, r2, r3
 8003482:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003484:	b10b      	cbz	r3, 800348a <__sflush_r+0x42>
 8003486:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003488:	1ad2      	subs	r2, r2, r3
 800348a:	2300      	movs	r3, #0
 800348c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800348e:	6a21      	ldr	r1, [r4, #32]
 8003490:	4628      	mov	r0, r5
 8003492:	47b0      	blx	r6
 8003494:	1c43      	adds	r3, r0, #1
 8003496:	89a3      	ldrh	r3, [r4, #12]
 8003498:	d106      	bne.n	80034a8 <__sflush_r+0x60>
 800349a:	6829      	ldr	r1, [r5, #0]
 800349c:	291d      	cmp	r1, #29
 800349e:	d82b      	bhi.n	80034f8 <__sflush_r+0xb0>
 80034a0:	4a28      	ldr	r2, [pc, #160]	@ (8003544 <__sflush_r+0xfc>)
 80034a2:	410a      	asrs	r2, r1
 80034a4:	07d6      	lsls	r6, r2, #31
 80034a6:	d427      	bmi.n	80034f8 <__sflush_r+0xb0>
 80034a8:	2200      	movs	r2, #0
 80034aa:	6062      	str	r2, [r4, #4]
 80034ac:	04d9      	lsls	r1, r3, #19
 80034ae:	6922      	ldr	r2, [r4, #16]
 80034b0:	6022      	str	r2, [r4, #0]
 80034b2:	d504      	bpl.n	80034be <__sflush_r+0x76>
 80034b4:	1c42      	adds	r2, r0, #1
 80034b6:	d101      	bne.n	80034bc <__sflush_r+0x74>
 80034b8:	682b      	ldr	r3, [r5, #0]
 80034ba:	b903      	cbnz	r3, 80034be <__sflush_r+0x76>
 80034bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80034be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034c0:	602f      	str	r7, [r5, #0]
 80034c2:	b1b9      	cbz	r1, 80034f4 <__sflush_r+0xac>
 80034c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80034c8:	4299      	cmp	r1, r3
 80034ca:	d002      	beq.n	80034d2 <__sflush_r+0x8a>
 80034cc:	4628      	mov	r0, r5
 80034ce:	f7ff fbf5 	bl	8002cbc <_free_r>
 80034d2:	2300      	movs	r3, #0
 80034d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80034d6:	e00d      	b.n	80034f4 <__sflush_r+0xac>
 80034d8:	2301      	movs	r3, #1
 80034da:	4628      	mov	r0, r5
 80034dc:	47b0      	blx	r6
 80034de:	4602      	mov	r2, r0
 80034e0:	1c50      	adds	r0, r2, #1
 80034e2:	d1c9      	bne.n	8003478 <__sflush_r+0x30>
 80034e4:	682b      	ldr	r3, [r5, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0c6      	beq.n	8003478 <__sflush_r+0x30>
 80034ea:	2b1d      	cmp	r3, #29
 80034ec:	d001      	beq.n	80034f2 <__sflush_r+0xaa>
 80034ee:	2b16      	cmp	r3, #22
 80034f0:	d11d      	bne.n	800352e <__sflush_r+0xe6>
 80034f2:	602f      	str	r7, [r5, #0]
 80034f4:	2000      	movs	r0, #0
 80034f6:	e021      	b.n	800353c <__sflush_r+0xf4>
 80034f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034fc:	b21b      	sxth	r3, r3
 80034fe:	e01a      	b.n	8003536 <__sflush_r+0xee>
 8003500:	690f      	ldr	r7, [r1, #16]
 8003502:	2f00      	cmp	r7, #0
 8003504:	d0f6      	beq.n	80034f4 <__sflush_r+0xac>
 8003506:	0793      	lsls	r3, r2, #30
 8003508:	680e      	ldr	r6, [r1, #0]
 800350a:	bf08      	it	eq
 800350c:	694b      	ldreq	r3, [r1, #20]
 800350e:	600f      	str	r7, [r1, #0]
 8003510:	bf18      	it	ne
 8003512:	2300      	movne	r3, #0
 8003514:	1bf6      	subs	r6, r6, r7
 8003516:	608b      	str	r3, [r1, #8]
 8003518:	2e00      	cmp	r6, #0
 800351a:	ddeb      	ble.n	80034f4 <__sflush_r+0xac>
 800351c:	6a21      	ldr	r1, [r4, #32]
 800351e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003522:	4633      	mov	r3, r6
 8003524:	463a      	mov	r2, r7
 8003526:	4628      	mov	r0, r5
 8003528:	47e0      	blx	ip
 800352a:	2800      	cmp	r0, #0
 800352c:	dc07      	bgt.n	800353e <__sflush_r+0xf6>
 800352e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003536:	81a3      	strh	r3, [r4, #12]
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800353e:	4407      	add	r7, r0
 8003540:	1a36      	subs	r6, r6, r0
 8003542:	e7e9      	b.n	8003518 <__sflush_r+0xd0>
 8003544:	dfbffffe 	.word	0xdfbffffe

08003548 <_fflush_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	690b      	ldr	r3, [r1, #16]
 800354c:	4605      	mov	r5, r0
 800354e:	460c      	mov	r4, r1
 8003550:	b913      	cbnz	r3, 8003558 <_fflush_r+0x10>
 8003552:	2500      	movs	r5, #0
 8003554:	4628      	mov	r0, r5
 8003556:	bd38      	pop	{r3, r4, r5, pc}
 8003558:	b118      	cbz	r0, 8003562 <_fflush_r+0x1a>
 800355a:	6a03      	ldr	r3, [r0, #32]
 800355c:	b90b      	cbnz	r3, 8003562 <_fflush_r+0x1a>
 800355e:	f7ff f9b3 	bl	80028c8 <__sinit>
 8003562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f3      	beq.n	8003552 <_fflush_r+0xa>
 800356a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800356c:	07d0      	lsls	r0, r2, #31
 800356e:	d404      	bmi.n	800357a <_fflush_r+0x32>
 8003570:	0599      	lsls	r1, r3, #22
 8003572:	d402      	bmi.n	800357a <_fflush_r+0x32>
 8003574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003576:	f7ff fb9e 	bl	8002cb6 <__retarget_lock_acquire_recursive>
 800357a:	4628      	mov	r0, r5
 800357c:	4621      	mov	r1, r4
 800357e:	f7ff ff63 	bl	8003448 <__sflush_r>
 8003582:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003584:	07da      	lsls	r2, r3, #31
 8003586:	4605      	mov	r5, r0
 8003588:	d4e4      	bmi.n	8003554 <_fflush_r+0xc>
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	059b      	lsls	r3, r3, #22
 800358e:	d4e1      	bmi.n	8003554 <_fflush_r+0xc>
 8003590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003592:	f7ff fb91 	bl	8002cb8 <__retarget_lock_release_recursive>
 8003596:	e7dd      	b.n	8003554 <_fflush_r+0xc>

08003598 <__swhatbuf_r>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	460c      	mov	r4, r1
 800359c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035a0:	2900      	cmp	r1, #0
 80035a2:	b096      	sub	sp, #88	@ 0x58
 80035a4:	4615      	mov	r5, r2
 80035a6:	461e      	mov	r6, r3
 80035a8:	da0d      	bge.n	80035c6 <__swhatbuf_r+0x2e>
 80035aa:	89a3      	ldrh	r3, [r4, #12]
 80035ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80035b0:	f04f 0100 	mov.w	r1, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2340      	movne	r3, #64	@ 0x40
 80035b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80035bc:	2000      	movs	r0, #0
 80035be:	6031      	str	r1, [r6, #0]
 80035c0:	602b      	str	r3, [r5, #0]
 80035c2:	b016      	add	sp, #88	@ 0x58
 80035c4:	bd70      	pop	{r4, r5, r6, pc}
 80035c6:	466a      	mov	r2, sp
 80035c8:	f000 f848 	bl	800365c <_fstat_r>
 80035cc:	2800      	cmp	r0, #0
 80035ce:	dbec      	blt.n	80035aa <__swhatbuf_r+0x12>
 80035d0:	9901      	ldr	r1, [sp, #4]
 80035d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80035d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80035da:	4259      	negs	r1, r3
 80035dc:	4159      	adcs	r1, r3
 80035de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035e2:	e7eb      	b.n	80035bc <__swhatbuf_r+0x24>

080035e4 <__smakebuf_r>:
 80035e4:	898b      	ldrh	r3, [r1, #12]
 80035e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035e8:	079d      	lsls	r5, r3, #30
 80035ea:	4606      	mov	r6, r0
 80035ec:	460c      	mov	r4, r1
 80035ee:	d507      	bpl.n	8003600 <__smakebuf_r+0x1c>
 80035f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	6123      	str	r3, [r4, #16]
 80035f8:	2301      	movs	r3, #1
 80035fa:	6163      	str	r3, [r4, #20]
 80035fc:	b003      	add	sp, #12
 80035fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003600:	ab01      	add	r3, sp, #4
 8003602:	466a      	mov	r2, sp
 8003604:	f7ff ffc8 	bl	8003598 <__swhatbuf_r>
 8003608:	9f00      	ldr	r7, [sp, #0]
 800360a:	4605      	mov	r5, r0
 800360c:	4639      	mov	r1, r7
 800360e:	4630      	mov	r0, r6
 8003610:	f7ff fbc0 	bl	8002d94 <_malloc_r>
 8003614:	b948      	cbnz	r0, 800362a <__smakebuf_r+0x46>
 8003616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800361a:	059a      	lsls	r2, r3, #22
 800361c:	d4ee      	bmi.n	80035fc <__smakebuf_r+0x18>
 800361e:	f023 0303 	bic.w	r3, r3, #3
 8003622:	f043 0302 	orr.w	r3, r3, #2
 8003626:	81a3      	strh	r3, [r4, #12]
 8003628:	e7e2      	b.n	80035f0 <__smakebuf_r+0xc>
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	6020      	str	r0, [r4, #0]
 800362e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003632:	81a3      	strh	r3, [r4, #12]
 8003634:	9b01      	ldr	r3, [sp, #4]
 8003636:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800363a:	b15b      	cbz	r3, 8003654 <__smakebuf_r+0x70>
 800363c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003640:	4630      	mov	r0, r6
 8003642:	f000 f81d 	bl	8003680 <_isatty_r>
 8003646:	b128      	cbz	r0, 8003654 <__smakebuf_r+0x70>
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	f023 0303 	bic.w	r3, r3, #3
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	81a3      	strh	r3, [r4, #12]
 8003654:	89a3      	ldrh	r3, [r4, #12]
 8003656:	431d      	orrs	r5, r3
 8003658:	81a5      	strh	r5, [r4, #12]
 800365a:	e7cf      	b.n	80035fc <__smakebuf_r+0x18>

0800365c <_fstat_r>:
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4d07      	ldr	r5, [pc, #28]	@ (800367c <_fstat_r+0x20>)
 8003660:	2300      	movs	r3, #0
 8003662:	4604      	mov	r4, r0
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	602b      	str	r3, [r5, #0]
 800366a:	f000 f93e 	bl	80038ea <_fstat>
 800366e:	1c43      	adds	r3, r0, #1
 8003670:	d102      	bne.n	8003678 <_fstat_r+0x1c>
 8003672:	682b      	ldr	r3, [r5, #0]
 8003674:	b103      	cbz	r3, 8003678 <_fstat_r+0x1c>
 8003676:	6023      	str	r3, [r4, #0]
 8003678:	bd38      	pop	{r3, r4, r5, pc}
 800367a:	bf00      	nop
 800367c:	20000218 	.word	0x20000218

08003680 <_isatty_r>:
 8003680:	b538      	push	{r3, r4, r5, lr}
 8003682:	4d06      	ldr	r5, [pc, #24]	@ (800369c <_isatty_r+0x1c>)
 8003684:	2300      	movs	r3, #0
 8003686:	4604      	mov	r4, r0
 8003688:	4608      	mov	r0, r1
 800368a:	602b      	str	r3, [r5, #0]
 800368c:	f000 fa90 	bl	8003bb0 <_isatty>
 8003690:	1c43      	adds	r3, r0, #1
 8003692:	d102      	bne.n	800369a <_isatty_r+0x1a>
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	b103      	cbz	r3, 800369a <_isatty_r+0x1a>
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	bd38      	pop	{r3, r4, r5, pc}
 800369c:	20000218 	.word	0x20000218

080036a0 <_sbrk_r>:
 80036a0:	b538      	push	{r3, r4, r5, lr}
 80036a2:	4d06      	ldr	r5, [pc, #24]	@ (80036bc <_sbrk_r+0x1c>)
 80036a4:	2300      	movs	r3, #0
 80036a6:	4604      	mov	r4, r0
 80036a8:	4608      	mov	r0, r1
 80036aa:	602b      	str	r3, [r5, #0]
 80036ac:	f7fd fc3e 	bl	8000f2c <_sbrk>
 80036b0:	1c43      	adds	r3, r0, #1
 80036b2:	d102      	bne.n	80036ba <_sbrk_r+0x1a>
 80036b4:	682b      	ldr	r3, [r5, #0]
 80036b6:	b103      	cbz	r3, 80036ba <_sbrk_r+0x1a>
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	bd38      	pop	{r3, r4, r5, pc}
 80036bc:	20000218 	.word	0x20000218

080036c0 <findslot>:
 80036c0:	4b0a      	ldr	r3, [pc, #40]	@ (80036ec <findslot+0x2c>)
 80036c2:	b510      	push	{r4, lr}
 80036c4:	4604      	mov	r4, r0
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	b118      	cbz	r0, 80036d2 <findslot+0x12>
 80036ca:	6a03      	ldr	r3, [r0, #32]
 80036cc:	b90b      	cbnz	r3, 80036d2 <findslot+0x12>
 80036ce:	f7ff f8fb 	bl	80028c8 <__sinit>
 80036d2:	2c13      	cmp	r4, #19
 80036d4:	d807      	bhi.n	80036e6 <findslot+0x26>
 80036d6:	4806      	ldr	r0, [pc, #24]	@ (80036f0 <findslot+0x30>)
 80036d8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80036dc:	3201      	adds	r2, #1
 80036de:	d002      	beq.n	80036e6 <findslot+0x26>
 80036e0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80036e4:	bd10      	pop	{r4, pc}
 80036e6:	2000      	movs	r0, #0
 80036e8:	e7fc      	b.n	80036e4 <findslot+0x24>
 80036ea:	bf00      	nop
 80036ec:	20000018 	.word	0x20000018
 80036f0:	20000234 	.word	0x20000234

080036f4 <error>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	4604      	mov	r4, r0
 80036f8:	f7ff fab2 	bl	8002c60 <__errno>
 80036fc:	2613      	movs	r6, #19
 80036fe:	4605      	mov	r5, r0
 8003700:	2700      	movs	r7, #0
 8003702:	4630      	mov	r0, r6
 8003704:	4639      	mov	r1, r7
 8003706:	beab      	bkpt	0x00ab
 8003708:	4606      	mov	r6, r0
 800370a:	602e      	str	r6, [r5, #0]
 800370c:	4620      	mov	r0, r4
 800370e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003710 <checkerror>:
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	d101      	bne.n	8003718 <checkerror+0x8>
 8003714:	f7ff bfee 	b.w	80036f4 <error>
 8003718:	4770      	bx	lr

0800371a <_swiread>:
 800371a:	b530      	push	{r4, r5, lr}
 800371c:	b085      	sub	sp, #20
 800371e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003722:	9203      	str	r2, [sp, #12]
 8003724:	2406      	movs	r4, #6
 8003726:	ad01      	add	r5, sp, #4
 8003728:	4620      	mov	r0, r4
 800372a:	4629      	mov	r1, r5
 800372c:	beab      	bkpt	0x00ab
 800372e:	4604      	mov	r4, r0
 8003730:	4620      	mov	r0, r4
 8003732:	f7ff ffed 	bl	8003710 <checkerror>
 8003736:	b005      	add	sp, #20
 8003738:	bd30      	pop	{r4, r5, pc}

0800373a <_read>:
 800373a:	b570      	push	{r4, r5, r6, lr}
 800373c:	460e      	mov	r6, r1
 800373e:	4614      	mov	r4, r2
 8003740:	f7ff ffbe 	bl	80036c0 <findslot>
 8003744:	4605      	mov	r5, r0
 8003746:	b930      	cbnz	r0, 8003756 <_read+0x1c>
 8003748:	f7ff fa8a 	bl	8002c60 <__errno>
 800374c:	2309      	movs	r3, #9
 800374e:	6003      	str	r3, [r0, #0]
 8003750:	f04f 30ff 	mov.w	r0, #4294967295
 8003754:	bd70      	pop	{r4, r5, r6, pc}
 8003756:	6800      	ldr	r0, [r0, #0]
 8003758:	4622      	mov	r2, r4
 800375a:	4631      	mov	r1, r6
 800375c:	f7ff ffdd 	bl	800371a <_swiread>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d0f5      	beq.n	8003750 <_read+0x16>
 8003764:	686b      	ldr	r3, [r5, #4]
 8003766:	1a20      	subs	r0, r4, r0
 8003768:	4403      	add	r3, r0
 800376a:	606b      	str	r3, [r5, #4]
 800376c:	e7f2      	b.n	8003754 <_read+0x1a>

0800376e <_swilseek>:
 800376e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003770:	460c      	mov	r4, r1
 8003772:	4616      	mov	r6, r2
 8003774:	f7ff ffa4 	bl	80036c0 <findslot>
 8003778:	4605      	mov	r5, r0
 800377a:	b940      	cbnz	r0, 800378e <_swilseek+0x20>
 800377c:	f7ff fa70 	bl	8002c60 <__errno>
 8003780:	2309      	movs	r3, #9
 8003782:	6003      	str	r3, [r0, #0]
 8003784:	f04f 34ff 	mov.w	r4, #4294967295
 8003788:	4620      	mov	r0, r4
 800378a:	b003      	add	sp, #12
 800378c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800378e:	2e02      	cmp	r6, #2
 8003790:	d903      	bls.n	800379a <_swilseek+0x2c>
 8003792:	f7ff fa65 	bl	8002c60 <__errno>
 8003796:	2316      	movs	r3, #22
 8003798:	e7f3      	b.n	8003782 <_swilseek+0x14>
 800379a:	2e01      	cmp	r6, #1
 800379c:	d112      	bne.n	80037c4 <_swilseek+0x56>
 800379e:	6843      	ldr	r3, [r0, #4]
 80037a0:	18e4      	adds	r4, r4, r3
 80037a2:	d4f6      	bmi.n	8003792 <_swilseek+0x24>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	260a      	movs	r6, #10
 80037a8:	e9cd 3400 	strd	r3, r4, [sp]
 80037ac:	466f      	mov	r7, sp
 80037ae:	4630      	mov	r0, r6
 80037b0:	4639      	mov	r1, r7
 80037b2:	beab      	bkpt	0x00ab
 80037b4:	4606      	mov	r6, r0
 80037b6:	4630      	mov	r0, r6
 80037b8:	f7ff ffaa 	bl	8003710 <checkerror>
 80037bc:	2800      	cmp	r0, #0
 80037be:	dbe1      	blt.n	8003784 <_swilseek+0x16>
 80037c0:	606c      	str	r4, [r5, #4]
 80037c2:	e7e1      	b.n	8003788 <_swilseek+0x1a>
 80037c4:	2e02      	cmp	r6, #2
 80037c6:	6803      	ldr	r3, [r0, #0]
 80037c8:	d1ec      	bne.n	80037a4 <_swilseek+0x36>
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	260c      	movs	r6, #12
 80037ce:	466f      	mov	r7, sp
 80037d0:	4630      	mov	r0, r6
 80037d2:	4639      	mov	r1, r7
 80037d4:	beab      	bkpt	0x00ab
 80037d6:	4606      	mov	r6, r0
 80037d8:	4630      	mov	r0, r6
 80037da:	f7ff ff99 	bl	8003710 <checkerror>
 80037de:	1c43      	adds	r3, r0, #1
 80037e0:	d0d0      	beq.n	8003784 <_swilseek+0x16>
 80037e2:	4404      	add	r4, r0
 80037e4:	e7de      	b.n	80037a4 <_swilseek+0x36>

080037e6 <_lseek>:
 80037e6:	f7ff bfc2 	b.w	800376e <_swilseek>

080037ea <_swiwrite>:
 80037ea:	b530      	push	{r4, r5, lr}
 80037ec:	b085      	sub	sp, #20
 80037ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80037f2:	9203      	str	r2, [sp, #12]
 80037f4:	2405      	movs	r4, #5
 80037f6:	ad01      	add	r5, sp, #4
 80037f8:	4620      	mov	r0, r4
 80037fa:	4629      	mov	r1, r5
 80037fc:	beab      	bkpt	0x00ab
 80037fe:	4604      	mov	r4, r0
 8003800:	4620      	mov	r0, r4
 8003802:	f7ff ff85 	bl	8003710 <checkerror>
 8003806:	b005      	add	sp, #20
 8003808:	bd30      	pop	{r4, r5, pc}

0800380a <_write>:
 800380a:	b570      	push	{r4, r5, r6, lr}
 800380c:	460e      	mov	r6, r1
 800380e:	4615      	mov	r5, r2
 8003810:	f7ff ff56 	bl	80036c0 <findslot>
 8003814:	4604      	mov	r4, r0
 8003816:	b930      	cbnz	r0, 8003826 <_write+0x1c>
 8003818:	f7ff fa22 	bl	8002c60 <__errno>
 800381c:	2309      	movs	r3, #9
 800381e:	6003      	str	r3, [r0, #0]
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	bd70      	pop	{r4, r5, r6, pc}
 8003826:	6800      	ldr	r0, [r0, #0]
 8003828:	462a      	mov	r2, r5
 800382a:	4631      	mov	r1, r6
 800382c:	f7ff ffdd 	bl	80037ea <_swiwrite>
 8003830:	1e03      	subs	r3, r0, #0
 8003832:	dbf5      	blt.n	8003820 <_write+0x16>
 8003834:	6862      	ldr	r2, [r4, #4]
 8003836:	1ae8      	subs	r0, r5, r3
 8003838:	4402      	add	r2, r0
 800383a:	42ab      	cmp	r3, r5
 800383c:	6062      	str	r2, [r4, #4]
 800383e:	d1f1      	bne.n	8003824 <_write+0x1a>
 8003840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003844:	2000      	movs	r0, #0
 8003846:	f7ff bf55 	b.w	80036f4 <error>

0800384a <_swiclose>:
 800384a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800384c:	2402      	movs	r4, #2
 800384e:	9001      	str	r0, [sp, #4]
 8003850:	ad01      	add	r5, sp, #4
 8003852:	4620      	mov	r0, r4
 8003854:	4629      	mov	r1, r5
 8003856:	beab      	bkpt	0x00ab
 8003858:	4604      	mov	r4, r0
 800385a:	4620      	mov	r0, r4
 800385c:	f7ff ff58 	bl	8003710 <checkerror>
 8003860:	b003      	add	sp, #12
 8003862:	bd30      	pop	{r4, r5, pc}

08003864 <_close>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4605      	mov	r5, r0
 8003868:	f7ff ff2a 	bl	80036c0 <findslot>
 800386c:	4604      	mov	r4, r0
 800386e:	b930      	cbnz	r0, 800387e <_close+0x1a>
 8003870:	f7ff f9f6 	bl	8002c60 <__errno>
 8003874:	2309      	movs	r3, #9
 8003876:	6003      	str	r3, [r0, #0]
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	bd38      	pop	{r3, r4, r5, pc}
 800387e:	3d01      	subs	r5, #1
 8003880:	2d01      	cmp	r5, #1
 8003882:	d809      	bhi.n	8003898 <_close+0x34>
 8003884:	4b07      	ldr	r3, [pc, #28]	@ (80038a4 <_close+0x40>)
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	429a      	cmp	r2, r3
 800388c:	d104      	bne.n	8003898 <_close+0x34>
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	2000      	movs	r0, #0
 8003896:	e7f1      	b.n	800387c <_close+0x18>
 8003898:	6820      	ldr	r0, [r4, #0]
 800389a:	f7ff ffd6 	bl	800384a <_swiclose>
 800389e:	2800      	cmp	r0, #0
 80038a0:	d0f5      	beq.n	800388e <_close+0x2a>
 80038a2:	e7eb      	b.n	800387c <_close+0x18>
 80038a4:	20000234 	.word	0x20000234

080038a8 <_swistat>:
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	460c      	mov	r4, r1
 80038ac:	f7ff ff08 	bl	80036c0 <findslot>
 80038b0:	4605      	mov	r5, r0
 80038b2:	b930      	cbnz	r0, 80038c2 <_swistat+0x1a>
 80038b4:	f7ff f9d4 	bl	8002c60 <__errno>
 80038b8:	2309      	movs	r3, #9
 80038ba:	6003      	str	r3, [r0, #0]
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	6863      	ldr	r3, [r4, #4]
 80038c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038c8:	6063      	str	r3, [r4, #4]
 80038ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038ce:	64a3      	str	r3, [r4, #72]	@ 0x48
 80038d0:	260c      	movs	r6, #12
 80038d2:	4630      	mov	r0, r6
 80038d4:	4629      	mov	r1, r5
 80038d6:	beab      	bkpt	0x00ab
 80038d8:	4605      	mov	r5, r0
 80038da:	4628      	mov	r0, r5
 80038dc:	f7ff ff18 	bl	8003710 <checkerror>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d0eb      	beq.n	80038bc <_swistat+0x14>
 80038e4:	6120      	str	r0, [r4, #16]
 80038e6:	2000      	movs	r0, #0
 80038e8:	e7ea      	b.n	80038c0 <_swistat+0x18>

080038ea <_fstat>:
 80038ea:	460b      	mov	r3, r1
 80038ec:	b510      	push	{r4, lr}
 80038ee:	2100      	movs	r1, #0
 80038f0:	4604      	mov	r4, r0
 80038f2:	2258      	movs	r2, #88	@ 0x58
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f965 	bl	8002bc4 <memset>
 80038fa:	4601      	mov	r1, r0
 80038fc:	4620      	mov	r0, r4
 80038fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003902:	f7ff bfd1 	b.w	80038a8 <_swistat>

08003906 <_stat>:
 8003906:	b538      	push	{r3, r4, r5, lr}
 8003908:	460d      	mov	r5, r1
 800390a:	4604      	mov	r4, r0
 800390c:	2258      	movs	r2, #88	@ 0x58
 800390e:	2100      	movs	r1, #0
 8003910:	4628      	mov	r0, r5
 8003912:	f7ff f957 	bl	8002bc4 <memset>
 8003916:	4620      	mov	r0, r4
 8003918:	2100      	movs	r1, #0
 800391a:	f000 f811 	bl	8003940 <_swiopen>
 800391e:	1c43      	adds	r3, r0, #1
 8003920:	4604      	mov	r4, r0
 8003922:	d00b      	beq.n	800393c <_stat+0x36>
 8003924:	686b      	ldr	r3, [r5, #4]
 8003926:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800392a:	606b      	str	r3, [r5, #4]
 800392c:	4629      	mov	r1, r5
 800392e:	f7ff ffbb 	bl	80038a8 <_swistat>
 8003932:	4605      	mov	r5, r0
 8003934:	4620      	mov	r0, r4
 8003936:	f7ff ff95 	bl	8003864 <_close>
 800393a:	462c      	mov	r4, r5
 800393c:	4620      	mov	r0, r4
 800393e:	bd38      	pop	{r3, r4, r5, pc}

08003940 <_swiopen>:
 8003940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003944:	4f29      	ldr	r7, [pc, #164]	@ (80039ec <_swiopen+0xac>)
 8003946:	b096      	sub	sp, #88	@ 0x58
 8003948:	4682      	mov	sl, r0
 800394a:	460e      	mov	r6, r1
 800394c:	2400      	movs	r4, #0
 800394e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8003952:	3301      	adds	r3, #1
 8003954:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8003958:	d00c      	beq.n	8003974 <_swiopen+0x34>
 800395a:	3401      	adds	r4, #1
 800395c:	2c14      	cmp	r4, #20
 800395e:	d1f6      	bne.n	800394e <_swiopen+0xe>
 8003960:	f7ff f97e 	bl	8002c60 <__errno>
 8003964:	2318      	movs	r3, #24
 8003966:	6003      	str	r3, [r0, #0]
 8003968:	f04f 34ff 	mov.w	r4, #4294967295
 800396c:	4620      	mov	r0, r4
 800396e:	b016      	add	sp, #88	@ 0x58
 8003970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003974:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8003978:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800397c:	46e9      	mov	r9, sp
 800397e:	d109      	bne.n	8003994 <_swiopen+0x54>
 8003980:	4649      	mov	r1, r9
 8003982:	4650      	mov	r0, sl
 8003984:	f7ff ffbf 	bl	8003906 <_stat>
 8003988:	3001      	adds	r0, #1
 800398a:	d003      	beq.n	8003994 <_swiopen+0x54>
 800398c:	f7ff f968 	bl	8002c60 <__errno>
 8003990:	2311      	movs	r3, #17
 8003992:	e7e8      	b.n	8003966 <_swiopen+0x26>
 8003994:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8003998:	f240 6301 	movw	r3, #1537	@ 0x601
 800399c:	07b2      	lsls	r2, r6, #30
 800399e:	bf48      	it	mi
 80039a0:	f045 0502 	orrmi.w	r5, r5, #2
 80039a4:	421e      	tst	r6, r3
 80039a6:	bf18      	it	ne
 80039a8:	f045 0504 	orrne.w	r5, r5, #4
 80039ac:	0733      	lsls	r3, r6, #28
 80039ae:	bf48      	it	mi
 80039b0:	f025 0504 	bicmi.w	r5, r5, #4
 80039b4:	4650      	mov	r0, sl
 80039b6:	bf48      	it	mi
 80039b8:	f045 0508 	orrmi.w	r5, r5, #8
 80039bc:	f8cd a000 	str.w	sl, [sp]
 80039c0:	f7fc fc76 	bl	80002b0 <strlen>
 80039c4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80039c8:	2501      	movs	r5, #1
 80039ca:	4628      	mov	r0, r5
 80039cc:	4649      	mov	r1, r9
 80039ce:	beab      	bkpt	0x00ab
 80039d0:	4605      	mov	r5, r0
 80039d2:	2d00      	cmp	r5, #0
 80039d4:	db05      	blt.n	80039e2 <_swiopen+0xa2>
 80039d6:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80039da:	4447      	add	r7, r8
 80039dc:	2300      	movs	r3, #0
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	e7c4      	b.n	800396c <_swiopen+0x2c>
 80039e2:	4628      	mov	r0, r5
 80039e4:	f7ff fe86 	bl	80036f4 <error>
 80039e8:	4604      	mov	r4, r0
 80039ea:	e7bf      	b.n	800396c <_swiopen+0x2c>
 80039ec:	20000234 	.word	0x20000234

080039f0 <_get_semihosting_exts>:
 80039f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80039f4:	4606      	mov	r6, r0
 80039f6:	460f      	mov	r7, r1
 80039f8:	4829      	ldr	r0, [pc, #164]	@ (8003aa0 <_get_semihosting_exts+0xb0>)
 80039fa:	2100      	movs	r1, #0
 80039fc:	4615      	mov	r5, r2
 80039fe:	f7ff ff9f 	bl	8003940 <_swiopen>
 8003a02:	462a      	mov	r2, r5
 8003a04:	4604      	mov	r4, r0
 8003a06:	2100      	movs	r1, #0
 8003a08:	4630      	mov	r0, r6
 8003a0a:	f7ff f8db 	bl	8002bc4 <memset>
 8003a0e:	1c63      	adds	r3, r4, #1
 8003a10:	d014      	beq.n	8003a3c <_get_semihosting_exts+0x4c>
 8003a12:	4620      	mov	r0, r4
 8003a14:	f7ff fe54 	bl	80036c0 <findslot>
 8003a18:	f04f 080c 	mov.w	r8, #12
 8003a1c:	4681      	mov	r9, r0
 8003a1e:	4640      	mov	r0, r8
 8003a20:	4649      	mov	r1, r9
 8003a22:	beab      	bkpt	0x00ab
 8003a24:	4680      	mov	r8, r0
 8003a26:	4640      	mov	r0, r8
 8003a28:	f7ff fe72 	bl	8003710 <checkerror>
 8003a2c:	2803      	cmp	r0, #3
 8003a2e:	dd02      	ble.n	8003a36 <_get_semihosting_exts+0x46>
 8003a30:	1ec3      	subs	r3, r0, #3
 8003a32:	42ab      	cmp	r3, r5
 8003a34:	dc07      	bgt.n	8003a46 <_get_semihosting_exts+0x56>
 8003a36:	4620      	mov	r0, r4
 8003a38:	f7ff ff14 	bl	8003864 <_close>
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	b003      	add	sp, #12
 8003a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a46:	2204      	movs	r2, #4
 8003a48:	eb0d 0102 	add.w	r1, sp, r2
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f7ff fe74 	bl	800373a <_read>
 8003a52:	2803      	cmp	r0, #3
 8003a54:	ddef      	ble.n	8003a36 <_get_semihosting_exts+0x46>
 8003a56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003a5a:	2b53      	cmp	r3, #83	@ 0x53
 8003a5c:	d1eb      	bne.n	8003a36 <_get_semihosting_exts+0x46>
 8003a5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003a62:	2b48      	cmp	r3, #72	@ 0x48
 8003a64:	d1e7      	bne.n	8003a36 <_get_semihosting_exts+0x46>
 8003a66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003a6a:	2b46      	cmp	r3, #70	@ 0x46
 8003a6c:	d1e3      	bne.n	8003a36 <_get_semihosting_exts+0x46>
 8003a6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a72:	2b42      	cmp	r3, #66	@ 0x42
 8003a74:	d1df      	bne.n	8003a36 <_get_semihosting_exts+0x46>
 8003a76:	2201      	movs	r2, #1
 8003a78:	4639      	mov	r1, r7
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f7ff fe77 	bl	800376e <_swilseek>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	dbd8      	blt.n	8003a36 <_get_semihosting_exts+0x46>
 8003a84:	462a      	mov	r2, r5
 8003a86:	4631      	mov	r1, r6
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7ff fe56 	bl	800373a <_read>
 8003a8e:	4605      	mov	r5, r0
 8003a90:	4620      	mov	r0, r4
 8003a92:	f7ff fee7 	bl	8003864 <_close>
 8003a96:	4628      	mov	r0, r5
 8003a98:	f7ff fe3a 	bl	8003710 <checkerror>
 8003a9c:	e7d0      	b.n	8003a40 <_get_semihosting_exts+0x50>
 8003a9e:	bf00      	nop
 8003aa0:	08003e33 	.word	0x08003e33

08003aa4 <initialise_semihosting_exts>:
 8003aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003aa6:	4d0a      	ldr	r5, [pc, #40]	@ (8003ad0 <initialise_semihosting_exts+0x2c>)
 8003aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8003ad4 <initialise_semihosting_exts+0x30>)
 8003aaa:	2100      	movs	r1, #0
 8003aac:	2201      	movs	r2, #1
 8003aae:	a801      	add	r0, sp, #4
 8003ab0:	6029      	str	r1, [r5, #0]
 8003ab2:	6022      	str	r2, [r4, #0]
 8003ab4:	f7ff ff9c 	bl	80039f0 <_get_semihosting_exts>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	dd07      	ble.n	8003acc <initialise_semihosting_exts+0x28>
 8003abc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ac0:	f003 0201 	and.w	r2, r3, #1
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	602a      	str	r2, [r5, #0]
 8003aca:	6023      	str	r3, [r4, #0]
 8003acc:	b003      	add	sp, #12
 8003ace:	bd30      	pop	{r4, r5, pc}
 8003ad0:	2000006c 	.word	0x2000006c
 8003ad4:	20000068 	.word	0x20000068

08003ad8 <_has_ext_stdout_stderr>:
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	4c04      	ldr	r4, [pc, #16]	@ (8003aec <_has_ext_stdout_stderr+0x14>)
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da01      	bge.n	8003ae6 <_has_ext_stdout_stderr+0xe>
 8003ae2:	f7ff ffdf 	bl	8003aa4 <initialise_semihosting_exts>
 8003ae6:	6820      	ldr	r0, [r4, #0]
 8003ae8:	bd10      	pop	{r4, pc}
 8003aea:	bf00      	nop
 8003aec:	20000068 	.word	0x20000068

08003af0 <initialise_monitor_handles>:
 8003af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af4:	b085      	sub	sp, #20
 8003af6:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 8003b9c <initialise_monitor_handles+0xac>
 8003afa:	f8cd 9004 	str.w	r9, [sp, #4]
 8003afe:	2303      	movs	r3, #3
 8003b00:	2400      	movs	r4, #0
 8003b02:	9303      	str	r3, [sp, #12]
 8003b04:	af01      	add	r7, sp, #4
 8003b06:	9402      	str	r4, [sp, #8]
 8003b08:	2501      	movs	r5, #1
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	4639      	mov	r1, r7
 8003b0e:	beab      	bkpt	0x00ab
 8003b10:	4605      	mov	r5, r0
 8003b12:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 8003ba0 <initialise_monitor_handles+0xb0>
 8003b16:	4623      	mov	r3, r4
 8003b18:	4c22      	ldr	r4, [pc, #136]	@ (8003ba4 <initialise_monitor_handles+0xb4>)
 8003b1a:	f8c8 5000 	str.w	r5, [r8]
 8003b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b22:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003b26:	3301      	adds	r3, #1
 8003b28:	2b14      	cmp	r3, #20
 8003b2a:	d1fa      	bne.n	8003b22 <initialise_monitor_handles+0x32>
 8003b2c:	f7ff ffd4 	bl	8003ad8 <_has_ext_stdout_stderr>
 8003b30:	4d1d      	ldr	r5, [pc, #116]	@ (8003ba8 <initialise_monitor_handles+0xb8>)
 8003b32:	b1d0      	cbz	r0, 8003b6a <initialise_monitor_handles+0x7a>
 8003b34:	f04f 0a03 	mov.w	sl, #3
 8003b38:	2304      	movs	r3, #4
 8003b3a:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b3e:	2601      	movs	r6, #1
 8003b40:	f8cd a00c 	str.w	sl, [sp, #12]
 8003b44:	9302      	str	r3, [sp, #8]
 8003b46:	4630      	mov	r0, r6
 8003b48:	4639      	mov	r1, r7
 8003b4a:	beab      	bkpt	0x00ab
 8003b4c:	4683      	mov	fp, r0
 8003b4e:	4b17      	ldr	r3, [pc, #92]	@ (8003bac <initialise_monitor_handles+0xbc>)
 8003b50:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b54:	f8c3 b000 	str.w	fp, [r3]
 8003b58:	2308      	movs	r3, #8
 8003b5a:	f8cd a00c 	str.w	sl, [sp, #12]
 8003b5e:	9302      	str	r3, [sp, #8]
 8003b60:	4630      	mov	r0, r6
 8003b62:	4639      	mov	r1, r7
 8003b64:	beab      	bkpt	0x00ab
 8003b66:	4606      	mov	r6, r0
 8003b68:	602e      	str	r6, [r5, #0]
 8003b6a:	682b      	ldr	r3, [r5, #0]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	bf02      	ittt	eq
 8003b70:	4b0e      	ldreq	r3, [pc, #56]	@ (8003bac <initialise_monitor_handles+0xbc>)
 8003b72:	681b      	ldreq	r3, [r3, #0]
 8003b74:	602b      	streq	r3, [r5, #0]
 8003b76:	2600      	movs	r6, #0
 8003b78:	f8d8 3000 	ldr.w	r3, [r8]
 8003b7c:	6023      	str	r3, [r4, #0]
 8003b7e:	6066      	str	r6, [r4, #4]
 8003b80:	f7ff ffaa 	bl	8003ad8 <_has_ext_stdout_stderr>
 8003b84:	b130      	cbz	r0, 8003b94 <initialise_monitor_handles+0xa4>
 8003b86:	4b09      	ldr	r3, [pc, #36]	@ (8003bac <initialise_monitor_handles+0xbc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003b8e:	682b      	ldr	r3, [r5, #0]
 8003b90:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003b94:	b005      	add	sp, #20
 8003b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	08003e49 	.word	0x08003e49
 8003ba0:	20000230 	.word	0x20000230
 8003ba4:	20000234 	.word	0x20000234
 8003ba8:	20000228 	.word	0x20000228
 8003bac:	2000022c 	.word	0x2000022c

08003bb0 <_isatty>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	f7ff fd85 	bl	80036c0 <findslot>
 8003bb6:	2409      	movs	r4, #9
 8003bb8:	4605      	mov	r5, r0
 8003bba:	b920      	cbnz	r0, 8003bc6 <_isatty+0x16>
 8003bbc:	f7ff f850 	bl	8002c60 <__errno>
 8003bc0:	6004      	str	r4, [r0, #0]
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	4629      	mov	r1, r5
 8003bca:	beab      	bkpt	0x00ab
 8003bcc:	4604      	mov	r4, r0
 8003bce:	2c01      	cmp	r4, #1
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	d0f7      	beq.n	8003bc4 <_isatty+0x14>
 8003bd4:	f7ff f844 	bl	8002c60 <__errno>
 8003bd8:	2513      	movs	r5, #19
 8003bda:	4604      	mov	r4, r0
 8003bdc:	2600      	movs	r6, #0
 8003bde:	4628      	mov	r0, r5
 8003be0:	4631      	mov	r1, r6
 8003be2:	beab      	bkpt	0x00ab
 8003be4:	4605      	mov	r5, r0
 8003be6:	6025      	str	r5, [r4, #0]
 8003be8:	e7eb      	b.n	8003bc2 <_isatty+0x12>
	...

08003bec <_init>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	bf00      	nop
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr

08003bf8 <_fini>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	bf00      	nop
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr
